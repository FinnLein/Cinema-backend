
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Tokens` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Tokens
 * 
 */
export type TokensModel = runtime.Types.Result.DefaultSelection<Prisma.$TokensPayload>

export type AggregateTokens = {
  _count: TokensCountAggregateOutputType | null
  _min: TokensMinAggregateOutputType | null
  _max: TokensMaxAggregateOutputType | null
}

export type TokensMinAggregateOutputType = {
  id: string | null
  token: string | null
  tokenHash: string | null
  email: string | null
  type: $Enums.TokenType | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type TokensMaxAggregateOutputType = {
  id: string | null
  token: string | null
  tokenHash: string | null
  email: string | null
  type: $Enums.TokenType | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type TokensCountAggregateOutputType = {
  id: number
  token: number
  tokenHash: number
  email: number
  type: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type TokensMinAggregateInputType = {
  id?: true
  token?: true
  tokenHash?: true
  email?: true
  type?: true
  createdAt?: true
  updatedAt?: true
}

export type TokensMaxAggregateInputType = {
  id?: true
  token?: true
  tokenHash?: true
  email?: true
  type?: true
  createdAt?: true
  updatedAt?: true
}

export type TokensCountAggregateInputType = {
  id?: true
  token?: true
  tokenHash?: true
  email?: true
  type?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type TokensAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Tokens to aggregate.
   */
  where?: Prisma.TokensWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Tokens to fetch.
   */
  orderBy?: Prisma.TokensOrderByWithRelationInput | Prisma.TokensOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TokensWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Tokens from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Tokens.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Tokens
  **/
  _count?: true | TokensCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TokensMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TokensMaxAggregateInputType
}

export type GetTokensAggregateType<T extends TokensAggregateArgs> = {
      [P in keyof T & keyof AggregateTokens]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTokens[P]>
    : Prisma.GetScalarType<T[P], AggregateTokens[P]>
}




export type TokensGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TokensWhereInput
  orderBy?: Prisma.TokensOrderByWithAggregationInput | Prisma.TokensOrderByWithAggregationInput[]
  by: Prisma.TokensScalarFieldEnum[] | Prisma.TokensScalarFieldEnum
  having?: Prisma.TokensScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TokensCountAggregateInputType | true
  _min?: TokensMinAggregateInputType
  _max?: TokensMaxAggregateInputType
}

export type TokensGroupByOutputType = {
  id: string
  token: string
  tokenHash: string
  email: string
  type: $Enums.TokenType
  createdAt: Date
  updatedAt: Date
  _count: TokensCountAggregateOutputType | null
  _min: TokensMinAggregateOutputType | null
  _max: TokensMaxAggregateOutputType | null
}

type GetTokensGroupByPayload<T extends TokensGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TokensGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TokensGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TokensGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TokensGroupByOutputType[P]>
      }
    >
  >



export type TokensWhereInput = {
  AND?: Prisma.TokensWhereInput | Prisma.TokensWhereInput[]
  OR?: Prisma.TokensWhereInput[]
  NOT?: Prisma.TokensWhereInput | Prisma.TokensWhereInput[]
  id?: Prisma.StringFilter<"Tokens"> | string
  token?: Prisma.StringFilter<"Tokens"> | string
  tokenHash?: Prisma.StringFilter<"Tokens"> | string
  email?: Prisma.StringFilter<"Tokens"> | string
  type?: Prisma.EnumTokenTypeFilter<"Tokens"> | $Enums.TokenType
  createdAt?: Prisma.DateTimeFilter<"Tokens"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Tokens"> | Date | string
}

export type TokensOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  token?: Prisma.SortOrder
  tokenHash?: Prisma.SortOrder
  email?: Prisma.SortOrder
  type?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TokensWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.TokensWhereInput | Prisma.TokensWhereInput[]
  OR?: Prisma.TokensWhereInput[]
  NOT?: Prisma.TokensWhereInput | Prisma.TokensWhereInput[]
  token?: Prisma.StringFilter<"Tokens"> | string
  tokenHash?: Prisma.StringFilter<"Tokens"> | string
  email?: Prisma.StringFilter<"Tokens"> | string
  type?: Prisma.EnumTokenTypeFilter<"Tokens"> | $Enums.TokenType
  createdAt?: Prisma.DateTimeFilter<"Tokens"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Tokens"> | Date | string
}, "id">

export type TokensOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  token?: Prisma.SortOrder
  tokenHash?: Prisma.SortOrder
  email?: Prisma.SortOrder
  type?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.TokensCountOrderByAggregateInput
  _max?: Prisma.TokensMaxOrderByAggregateInput
  _min?: Prisma.TokensMinOrderByAggregateInput
}

export type TokensScalarWhereWithAggregatesInput = {
  AND?: Prisma.TokensScalarWhereWithAggregatesInput | Prisma.TokensScalarWhereWithAggregatesInput[]
  OR?: Prisma.TokensScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TokensScalarWhereWithAggregatesInput | Prisma.TokensScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Tokens"> | string
  token?: Prisma.StringWithAggregatesFilter<"Tokens"> | string
  tokenHash?: Prisma.StringWithAggregatesFilter<"Tokens"> | string
  email?: Prisma.StringWithAggregatesFilter<"Tokens"> | string
  type?: Prisma.EnumTokenTypeWithAggregatesFilter<"Tokens"> | $Enums.TokenType
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Tokens"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Tokens"> | Date | string
}

export type TokensCreateInput = {
  id?: string
  token: string
  tokenHash: string
  email: string
  type: $Enums.TokenType
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TokensUncheckedCreateInput = {
  id?: string
  token: string
  tokenHash: string
  email: string
  type: $Enums.TokenType
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TokensUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  token?: Prisma.StringFieldUpdateOperationsInput | string
  tokenHash?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumTokenTypeFieldUpdateOperationsInput | $Enums.TokenType
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TokensUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  token?: Prisma.StringFieldUpdateOperationsInput | string
  tokenHash?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumTokenTypeFieldUpdateOperationsInput | $Enums.TokenType
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TokensCreateManyInput = {
  id?: string
  token: string
  tokenHash: string
  email: string
  type: $Enums.TokenType
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TokensUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  token?: Prisma.StringFieldUpdateOperationsInput | string
  tokenHash?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumTokenTypeFieldUpdateOperationsInput | $Enums.TokenType
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TokensUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  token?: Prisma.StringFieldUpdateOperationsInput | string
  tokenHash?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumTokenTypeFieldUpdateOperationsInput | $Enums.TokenType
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TokensCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  token?: Prisma.SortOrder
  tokenHash?: Prisma.SortOrder
  email?: Prisma.SortOrder
  type?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TokensMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  token?: Prisma.SortOrder
  tokenHash?: Prisma.SortOrder
  email?: Prisma.SortOrder
  type?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TokensMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  token?: Prisma.SortOrder
  tokenHash?: Prisma.SortOrder
  email?: Prisma.SortOrder
  type?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type EnumTokenTypeFieldUpdateOperationsInput = {
  set?: $Enums.TokenType
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}



export type TokensSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  token?: boolean
  tokenHash?: boolean
  email?: boolean
  type?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["tokens"]>

export type TokensSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  token?: boolean
  tokenHash?: boolean
  email?: boolean
  type?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["tokens"]>

export type TokensSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  token?: boolean
  tokenHash?: boolean
  email?: boolean
  type?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["tokens"]>

export type TokensSelectScalar = {
  id?: boolean
  token?: boolean
  tokenHash?: boolean
  email?: boolean
  type?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type TokensOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "token" | "tokenHash" | "email" | "type" | "createdAt" | "updatedAt", ExtArgs["result"]["tokens"]>

export type $TokensPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Tokens"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    token: string
    tokenHash: string
    email: string
    type: $Enums.TokenType
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["tokens"]>
  composites: {}
}

export type TokensGetPayload<S extends boolean | null | undefined | TokensDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TokensPayload, S>

export type TokensCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TokensFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TokensCountAggregateInputType | true
  }

export interface TokensDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tokens'], meta: { name: 'Tokens' } }
  /**
   * Find zero or one Tokens that matches the filter.
   * @param {TokensFindUniqueArgs} args - Arguments to find a Tokens
   * @example
   * // Get one Tokens
   * const tokens = await prisma.tokens.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TokensFindUniqueArgs>(args: Prisma.SelectSubset<T, TokensFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TokensClient<runtime.Types.Result.GetResult<Prisma.$TokensPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Tokens that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TokensFindUniqueOrThrowArgs} args - Arguments to find a Tokens
   * @example
   * // Get one Tokens
   * const tokens = await prisma.tokens.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TokensFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TokensFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TokensClient<runtime.Types.Result.GetResult<Prisma.$TokensPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Tokens that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TokensFindFirstArgs} args - Arguments to find a Tokens
   * @example
   * // Get one Tokens
   * const tokens = await prisma.tokens.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TokensFindFirstArgs>(args?: Prisma.SelectSubset<T, TokensFindFirstArgs<ExtArgs>>): Prisma.Prisma__TokensClient<runtime.Types.Result.GetResult<Prisma.$TokensPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Tokens that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TokensFindFirstOrThrowArgs} args - Arguments to find a Tokens
   * @example
   * // Get one Tokens
   * const tokens = await prisma.tokens.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TokensFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TokensFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TokensClient<runtime.Types.Result.GetResult<Prisma.$TokensPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Tokens that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TokensFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Tokens
   * const tokens = await prisma.tokens.findMany()
   * 
   * // Get first 10 Tokens
   * const tokens = await prisma.tokens.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const tokensWithIdOnly = await prisma.tokens.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TokensFindManyArgs>(args?: Prisma.SelectSubset<T, TokensFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TokensPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Tokens.
   * @param {TokensCreateArgs} args - Arguments to create a Tokens.
   * @example
   * // Create one Tokens
   * const Tokens = await prisma.tokens.create({
   *   data: {
   *     // ... data to create a Tokens
   *   }
   * })
   * 
   */
  create<T extends TokensCreateArgs>(args: Prisma.SelectSubset<T, TokensCreateArgs<ExtArgs>>): Prisma.Prisma__TokensClient<runtime.Types.Result.GetResult<Prisma.$TokensPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Tokens.
   * @param {TokensCreateManyArgs} args - Arguments to create many Tokens.
   * @example
   * // Create many Tokens
   * const tokens = await prisma.tokens.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TokensCreateManyArgs>(args?: Prisma.SelectSubset<T, TokensCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Tokens and returns the data saved in the database.
   * @param {TokensCreateManyAndReturnArgs} args - Arguments to create many Tokens.
   * @example
   * // Create many Tokens
   * const tokens = await prisma.tokens.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Tokens and only return the `id`
   * const tokensWithIdOnly = await prisma.tokens.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TokensCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TokensCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TokensPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Tokens.
   * @param {TokensDeleteArgs} args - Arguments to delete one Tokens.
   * @example
   * // Delete one Tokens
   * const Tokens = await prisma.tokens.delete({
   *   where: {
   *     // ... filter to delete one Tokens
   *   }
   * })
   * 
   */
  delete<T extends TokensDeleteArgs>(args: Prisma.SelectSubset<T, TokensDeleteArgs<ExtArgs>>): Prisma.Prisma__TokensClient<runtime.Types.Result.GetResult<Prisma.$TokensPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Tokens.
   * @param {TokensUpdateArgs} args - Arguments to update one Tokens.
   * @example
   * // Update one Tokens
   * const tokens = await prisma.tokens.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TokensUpdateArgs>(args: Prisma.SelectSubset<T, TokensUpdateArgs<ExtArgs>>): Prisma.Prisma__TokensClient<runtime.Types.Result.GetResult<Prisma.$TokensPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Tokens.
   * @param {TokensDeleteManyArgs} args - Arguments to filter Tokens to delete.
   * @example
   * // Delete a few Tokens
   * const { count } = await prisma.tokens.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TokensDeleteManyArgs>(args?: Prisma.SelectSubset<T, TokensDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Tokens.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TokensUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Tokens
   * const tokens = await prisma.tokens.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TokensUpdateManyArgs>(args: Prisma.SelectSubset<T, TokensUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Tokens and returns the data updated in the database.
   * @param {TokensUpdateManyAndReturnArgs} args - Arguments to update many Tokens.
   * @example
   * // Update many Tokens
   * const tokens = await prisma.tokens.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Tokens and only return the `id`
   * const tokensWithIdOnly = await prisma.tokens.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TokensUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TokensUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TokensPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Tokens.
   * @param {TokensUpsertArgs} args - Arguments to update or create a Tokens.
   * @example
   * // Update or create a Tokens
   * const tokens = await prisma.tokens.upsert({
   *   create: {
   *     // ... data to create a Tokens
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Tokens we want to update
   *   }
   * })
   */
  upsert<T extends TokensUpsertArgs>(args: Prisma.SelectSubset<T, TokensUpsertArgs<ExtArgs>>): Prisma.Prisma__TokensClient<runtime.Types.Result.GetResult<Prisma.$TokensPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Tokens.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TokensCountArgs} args - Arguments to filter Tokens to count.
   * @example
   * // Count the number of Tokens
   * const count = await prisma.tokens.count({
   *   where: {
   *     // ... the filter for the Tokens we want to count
   *   }
   * })
  **/
  count<T extends TokensCountArgs>(
    args?: Prisma.Subset<T, TokensCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TokensCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Tokens.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TokensAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TokensAggregateArgs>(args: Prisma.Subset<T, TokensAggregateArgs>): Prisma.PrismaPromise<GetTokensAggregateType<T>>

  /**
   * Group by Tokens.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TokensGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TokensGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TokensGroupByArgs['orderBy'] }
      : { orderBy?: TokensGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TokensGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTokensGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Tokens model
 */
readonly fields: TokensFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Tokens.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TokensClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Tokens model
 */
export interface TokensFieldRefs {
  readonly id: Prisma.FieldRef<"Tokens", 'String'>
  readonly token: Prisma.FieldRef<"Tokens", 'String'>
  readonly tokenHash: Prisma.FieldRef<"Tokens", 'String'>
  readonly email: Prisma.FieldRef<"Tokens", 'String'>
  readonly type: Prisma.FieldRef<"Tokens", 'TokenType'>
  readonly createdAt: Prisma.FieldRef<"Tokens", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Tokens", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Tokens findUnique
 */
export type TokensFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tokens
   */
  select?: Prisma.TokensSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tokens
   */
  omit?: Prisma.TokensOmit<ExtArgs> | null
  /**
   * Filter, which Tokens to fetch.
   */
  where: Prisma.TokensWhereUniqueInput
}

/**
 * Tokens findUniqueOrThrow
 */
export type TokensFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tokens
   */
  select?: Prisma.TokensSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tokens
   */
  omit?: Prisma.TokensOmit<ExtArgs> | null
  /**
   * Filter, which Tokens to fetch.
   */
  where: Prisma.TokensWhereUniqueInput
}

/**
 * Tokens findFirst
 */
export type TokensFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tokens
   */
  select?: Prisma.TokensSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tokens
   */
  omit?: Prisma.TokensOmit<ExtArgs> | null
  /**
   * Filter, which Tokens to fetch.
   */
  where?: Prisma.TokensWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Tokens to fetch.
   */
  orderBy?: Prisma.TokensOrderByWithRelationInput | Prisma.TokensOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Tokens.
   */
  cursor?: Prisma.TokensWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Tokens from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Tokens.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Tokens.
   */
  distinct?: Prisma.TokensScalarFieldEnum | Prisma.TokensScalarFieldEnum[]
}

/**
 * Tokens findFirstOrThrow
 */
export type TokensFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tokens
   */
  select?: Prisma.TokensSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tokens
   */
  omit?: Prisma.TokensOmit<ExtArgs> | null
  /**
   * Filter, which Tokens to fetch.
   */
  where?: Prisma.TokensWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Tokens to fetch.
   */
  orderBy?: Prisma.TokensOrderByWithRelationInput | Prisma.TokensOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Tokens.
   */
  cursor?: Prisma.TokensWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Tokens from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Tokens.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Tokens.
   */
  distinct?: Prisma.TokensScalarFieldEnum | Prisma.TokensScalarFieldEnum[]
}

/**
 * Tokens findMany
 */
export type TokensFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tokens
   */
  select?: Prisma.TokensSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tokens
   */
  omit?: Prisma.TokensOmit<ExtArgs> | null
  /**
   * Filter, which Tokens to fetch.
   */
  where?: Prisma.TokensWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Tokens to fetch.
   */
  orderBy?: Prisma.TokensOrderByWithRelationInput | Prisma.TokensOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Tokens.
   */
  cursor?: Prisma.TokensWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Tokens from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Tokens.
   */
  skip?: number
  distinct?: Prisma.TokensScalarFieldEnum | Prisma.TokensScalarFieldEnum[]
}

/**
 * Tokens create
 */
export type TokensCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tokens
   */
  select?: Prisma.TokensSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tokens
   */
  omit?: Prisma.TokensOmit<ExtArgs> | null
  /**
   * The data needed to create a Tokens.
   */
  data: Prisma.XOR<Prisma.TokensCreateInput, Prisma.TokensUncheckedCreateInput>
}

/**
 * Tokens createMany
 */
export type TokensCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Tokens.
   */
  data: Prisma.TokensCreateManyInput | Prisma.TokensCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Tokens createManyAndReturn
 */
export type TokensCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tokens
   */
  select?: Prisma.TokensSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Tokens
   */
  omit?: Prisma.TokensOmit<ExtArgs> | null
  /**
   * The data used to create many Tokens.
   */
  data: Prisma.TokensCreateManyInput | Prisma.TokensCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Tokens update
 */
export type TokensUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tokens
   */
  select?: Prisma.TokensSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tokens
   */
  omit?: Prisma.TokensOmit<ExtArgs> | null
  /**
   * The data needed to update a Tokens.
   */
  data: Prisma.XOR<Prisma.TokensUpdateInput, Prisma.TokensUncheckedUpdateInput>
  /**
   * Choose, which Tokens to update.
   */
  where: Prisma.TokensWhereUniqueInput
}

/**
 * Tokens updateMany
 */
export type TokensUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Tokens.
   */
  data: Prisma.XOR<Prisma.TokensUpdateManyMutationInput, Prisma.TokensUncheckedUpdateManyInput>
  /**
   * Filter which Tokens to update
   */
  where?: Prisma.TokensWhereInput
  /**
   * Limit how many Tokens to update.
   */
  limit?: number
}

/**
 * Tokens updateManyAndReturn
 */
export type TokensUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tokens
   */
  select?: Prisma.TokensSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Tokens
   */
  omit?: Prisma.TokensOmit<ExtArgs> | null
  /**
   * The data used to update Tokens.
   */
  data: Prisma.XOR<Prisma.TokensUpdateManyMutationInput, Prisma.TokensUncheckedUpdateManyInput>
  /**
   * Filter which Tokens to update
   */
  where?: Prisma.TokensWhereInput
  /**
   * Limit how many Tokens to update.
   */
  limit?: number
}

/**
 * Tokens upsert
 */
export type TokensUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tokens
   */
  select?: Prisma.TokensSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tokens
   */
  omit?: Prisma.TokensOmit<ExtArgs> | null
  /**
   * The filter to search for the Tokens to update in case it exists.
   */
  where: Prisma.TokensWhereUniqueInput
  /**
   * In case the Tokens found by the `where` argument doesn't exist, create a new Tokens with this data.
   */
  create: Prisma.XOR<Prisma.TokensCreateInput, Prisma.TokensUncheckedCreateInput>
  /**
   * In case the Tokens was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TokensUpdateInput, Prisma.TokensUncheckedUpdateInput>
}

/**
 * Tokens delete
 */
export type TokensDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tokens
   */
  select?: Prisma.TokensSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tokens
   */
  omit?: Prisma.TokensOmit<ExtArgs> | null
  /**
   * Filter which Tokens to delete.
   */
  where: Prisma.TokensWhereUniqueInput
}

/**
 * Tokens deleteMany
 */
export type TokensDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Tokens to delete
   */
  where?: Prisma.TokensWhereInput
  /**
   * Limit how many Tokens to delete.
   */
  limit?: number
}

/**
 * Tokens without action
 */
export type TokensDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tokens
   */
  select?: Prisma.TokensSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tokens
   */
  omit?: Prisma.TokensOmit<ExtArgs> | null
}
