
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Actors` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Actors
 * 
 */
export type ActorsModel = runtime.Types.Result.DefaultSelection<Prisma.$ActorsPayload>

export type AggregateActors = {
  _count: ActorsCountAggregateOutputType | null
  _min: ActorsMinAggregateOutputType | null
  _max: ActorsMaxAggregateOutputType | null
}

export type ActorsMinAggregateOutputType = {
  id: string | null
  name: string | null
  slug: string | null
  picture: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ActorsMaxAggregateOutputType = {
  id: string | null
  name: string | null
  slug: string | null
  picture: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ActorsCountAggregateOutputType = {
  id: number
  name: number
  slug: number
  picture: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ActorsMinAggregateInputType = {
  id?: true
  name?: true
  slug?: true
  picture?: true
  createdAt?: true
  updatedAt?: true
}

export type ActorsMaxAggregateInputType = {
  id?: true
  name?: true
  slug?: true
  picture?: true
  createdAt?: true
  updatedAt?: true
}

export type ActorsCountAggregateInputType = {
  id?: true
  name?: true
  slug?: true
  picture?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ActorsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Actors to aggregate.
   */
  where?: Prisma.ActorsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Actors to fetch.
   */
  orderBy?: Prisma.ActorsOrderByWithRelationInput | Prisma.ActorsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ActorsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Actors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Actors.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Actors
  **/
  _count?: true | ActorsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ActorsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ActorsMaxAggregateInputType
}

export type GetActorsAggregateType<T extends ActorsAggregateArgs> = {
      [P in keyof T & keyof AggregateActors]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateActors[P]>
    : Prisma.GetScalarType<T[P], AggregateActors[P]>
}




export type ActorsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ActorsWhereInput
  orderBy?: Prisma.ActorsOrderByWithAggregationInput | Prisma.ActorsOrderByWithAggregationInput[]
  by: Prisma.ActorsScalarFieldEnum[] | Prisma.ActorsScalarFieldEnum
  having?: Prisma.ActorsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ActorsCountAggregateInputType | true
  _min?: ActorsMinAggregateInputType
  _max?: ActorsMaxAggregateInputType
}

export type ActorsGroupByOutputType = {
  id: string
  name: string
  slug: string
  picture: string | null
  createdAt: Date
  updatedAt: Date
  _count: ActorsCountAggregateOutputType | null
  _min: ActorsMinAggregateOutputType | null
  _max: ActorsMaxAggregateOutputType | null
}

type GetActorsGroupByPayload<T extends ActorsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ActorsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ActorsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ActorsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ActorsGroupByOutputType[P]>
      }
    >
  >



export type ActorsWhereInput = {
  AND?: Prisma.ActorsWhereInput | Prisma.ActorsWhereInput[]
  OR?: Prisma.ActorsWhereInput[]
  NOT?: Prisma.ActorsWhereInput | Prisma.ActorsWhereInput[]
  id?: Prisma.StringFilter<"Actors"> | string
  name?: Prisma.StringFilter<"Actors"> | string
  slug?: Prisma.StringFilter<"Actors"> | string
  picture?: Prisma.StringNullableFilter<"Actors"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Actors"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Actors"> | Date | string
}

export type ActorsOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  picture?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ActorsWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  slug?: string
  AND?: Prisma.ActorsWhereInput | Prisma.ActorsWhereInput[]
  OR?: Prisma.ActorsWhereInput[]
  NOT?: Prisma.ActorsWhereInput | Prisma.ActorsWhereInput[]
  name?: Prisma.StringFilter<"Actors"> | string
  picture?: Prisma.StringNullableFilter<"Actors"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Actors"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Actors"> | Date | string
}, "id" | "slug">

export type ActorsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  picture?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ActorsCountOrderByAggregateInput
  _max?: Prisma.ActorsMaxOrderByAggregateInput
  _min?: Prisma.ActorsMinOrderByAggregateInput
}

export type ActorsScalarWhereWithAggregatesInput = {
  AND?: Prisma.ActorsScalarWhereWithAggregatesInput | Prisma.ActorsScalarWhereWithAggregatesInput[]
  OR?: Prisma.ActorsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ActorsScalarWhereWithAggregatesInput | Prisma.ActorsScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Actors"> | string
  name?: Prisma.StringWithAggregatesFilter<"Actors"> | string
  slug?: Prisma.StringWithAggregatesFilter<"Actors"> | string
  picture?: Prisma.StringNullableWithAggregatesFilter<"Actors"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Actors"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Actors"> | Date | string
}

export type ActorsCreateInput = {
  id?: string
  name: string
  slug: string
  picture?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ActorsUncheckedCreateInput = {
  id?: string
  name: string
  slug: string
  picture?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ActorsUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  picture?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ActorsUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  picture?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ActorsCreateManyInput = {
  id?: string
  name: string
  slug: string
  picture?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ActorsUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  picture?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ActorsUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  picture?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ActorsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  picture?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ActorsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  picture?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ActorsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  picture?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}



export type ActorsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  slug?: boolean
  picture?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["actors"]>

export type ActorsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  slug?: boolean
  picture?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["actors"]>

export type ActorsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  slug?: boolean
  picture?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["actors"]>

export type ActorsSelectScalar = {
  id?: boolean
  name?: boolean
  slug?: boolean
  picture?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ActorsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "slug" | "picture" | "createdAt" | "updatedAt", ExtArgs["result"]["actors"]>

export type $ActorsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Actors"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    slug: string
    picture: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["actors"]>
  composites: {}
}

export type ActorsGetPayload<S extends boolean | null | undefined | ActorsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ActorsPayload, S>

export type ActorsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ActorsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ActorsCountAggregateInputType | true
  }

export interface ActorsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Actors'], meta: { name: 'Actors' } }
  /**
   * Find zero or one Actors that matches the filter.
   * @param {ActorsFindUniqueArgs} args - Arguments to find a Actors
   * @example
   * // Get one Actors
   * const actors = await prisma.actors.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ActorsFindUniqueArgs>(args: Prisma.SelectSubset<T, ActorsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ActorsClient<runtime.Types.Result.GetResult<Prisma.$ActorsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Actors that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ActorsFindUniqueOrThrowArgs} args - Arguments to find a Actors
   * @example
   * // Get one Actors
   * const actors = await prisma.actors.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ActorsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ActorsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ActorsClient<runtime.Types.Result.GetResult<Prisma.$ActorsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Actors that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ActorsFindFirstArgs} args - Arguments to find a Actors
   * @example
   * // Get one Actors
   * const actors = await prisma.actors.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ActorsFindFirstArgs>(args?: Prisma.SelectSubset<T, ActorsFindFirstArgs<ExtArgs>>): Prisma.Prisma__ActorsClient<runtime.Types.Result.GetResult<Prisma.$ActorsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Actors that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ActorsFindFirstOrThrowArgs} args - Arguments to find a Actors
   * @example
   * // Get one Actors
   * const actors = await prisma.actors.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ActorsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ActorsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ActorsClient<runtime.Types.Result.GetResult<Prisma.$ActorsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Actors that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ActorsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Actors
   * const actors = await prisma.actors.findMany()
   * 
   * // Get first 10 Actors
   * const actors = await prisma.actors.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const actorsWithIdOnly = await prisma.actors.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ActorsFindManyArgs>(args?: Prisma.SelectSubset<T, ActorsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ActorsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Actors.
   * @param {ActorsCreateArgs} args - Arguments to create a Actors.
   * @example
   * // Create one Actors
   * const Actors = await prisma.actors.create({
   *   data: {
   *     // ... data to create a Actors
   *   }
   * })
   * 
   */
  create<T extends ActorsCreateArgs>(args: Prisma.SelectSubset<T, ActorsCreateArgs<ExtArgs>>): Prisma.Prisma__ActorsClient<runtime.Types.Result.GetResult<Prisma.$ActorsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Actors.
   * @param {ActorsCreateManyArgs} args - Arguments to create many Actors.
   * @example
   * // Create many Actors
   * const actors = await prisma.actors.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ActorsCreateManyArgs>(args?: Prisma.SelectSubset<T, ActorsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Actors and returns the data saved in the database.
   * @param {ActorsCreateManyAndReturnArgs} args - Arguments to create many Actors.
   * @example
   * // Create many Actors
   * const actors = await prisma.actors.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Actors and only return the `id`
   * const actorsWithIdOnly = await prisma.actors.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ActorsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ActorsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ActorsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Actors.
   * @param {ActorsDeleteArgs} args - Arguments to delete one Actors.
   * @example
   * // Delete one Actors
   * const Actors = await prisma.actors.delete({
   *   where: {
   *     // ... filter to delete one Actors
   *   }
   * })
   * 
   */
  delete<T extends ActorsDeleteArgs>(args: Prisma.SelectSubset<T, ActorsDeleteArgs<ExtArgs>>): Prisma.Prisma__ActorsClient<runtime.Types.Result.GetResult<Prisma.$ActorsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Actors.
   * @param {ActorsUpdateArgs} args - Arguments to update one Actors.
   * @example
   * // Update one Actors
   * const actors = await prisma.actors.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ActorsUpdateArgs>(args: Prisma.SelectSubset<T, ActorsUpdateArgs<ExtArgs>>): Prisma.Prisma__ActorsClient<runtime.Types.Result.GetResult<Prisma.$ActorsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Actors.
   * @param {ActorsDeleteManyArgs} args - Arguments to filter Actors to delete.
   * @example
   * // Delete a few Actors
   * const { count } = await prisma.actors.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ActorsDeleteManyArgs>(args?: Prisma.SelectSubset<T, ActorsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Actors.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ActorsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Actors
   * const actors = await prisma.actors.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ActorsUpdateManyArgs>(args: Prisma.SelectSubset<T, ActorsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Actors and returns the data updated in the database.
   * @param {ActorsUpdateManyAndReturnArgs} args - Arguments to update many Actors.
   * @example
   * // Update many Actors
   * const actors = await prisma.actors.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Actors and only return the `id`
   * const actorsWithIdOnly = await prisma.actors.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ActorsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ActorsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ActorsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Actors.
   * @param {ActorsUpsertArgs} args - Arguments to update or create a Actors.
   * @example
   * // Update or create a Actors
   * const actors = await prisma.actors.upsert({
   *   create: {
   *     // ... data to create a Actors
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Actors we want to update
   *   }
   * })
   */
  upsert<T extends ActorsUpsertArgs>(args: Prisma.SelectSubset<T, ActorsUpsertArgs<ExtArgs>>): Prisma.Prisma__ActorsClient<runtime.Types.Result.GetResult<Prisma.$ActorsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Actors.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ActorsCountArgs} args - Arguments to filter Actors to count.
   * @example
   * // Count the number of Actors
   * const count = await prisma.actors.count({
   *   where: {
   *     // ... the filter for the Actors we want to count
   *   }
   * })
  **/
  count<T extends ActorsCountArgs>(
    args?: Prisma.Subset<T, ActorsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ActorsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Actors.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ActorsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ActorsAggregateArgs>(args: Prisma.Subset<T, ActorsAggregateArgs>): Prisma.PrismaPromise<GetActorsAggregateType<T>>

  /**
   * Group by Actors.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ActorsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ActorsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ActorsGroupByArgs['orderBy'] }
      : { orderBy?: ActorsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ActorsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActorsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Actors model
 */
readonly fields: ActorsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Actors.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ActorsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Actors model
 */
export interface ActorsFieldRefs {
  readonly id: Prisma.FieldRef<"Actors", 'String'>
  readonly name: Prisma.FieldRef<"Actors", 'String'>
  readonly slug: Prisma.FieldRef<"Actors", 'String'>
  readonly picture: Prisma.FieldRef<"Actors", 'String'>
  readonly createdAt: Prisma.FieldRef<"Actors", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Actors", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Actors findUnique
 */
export type ActorsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Actors
   */
  select?: Prisma.ActorsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Actors
   */
  omit?: Prisma.ActorsOmit<ExtArgs> | null
  /**
   * Filter, which Actors to fetch.
   */
  where: Prisma.ActorsWhereUniqueInput
}

/**
 * Actors findUniqueOrThrow
 */
export type ActorsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Actors
   */
  select?: Prisma.ActorsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Actors
   */
  omit?: Prisma.ActorsOmit<ExtArgs> | null
  /**
   * Filter, which Actors to fetch.
   */
  where: Prisma.ActorsWhereUniqueInput
}

/**
 * Actors findFirst
 */
export type ActorsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Actors
   */
  select?: Prisma.ActorsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Actors
   */
  omit?: Prisma.ActorsOmit<ExtArgs> | null
  /**
   * Filter, which Actors to fetch.
   */
  where?: Prisma.ActorsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Actors to fetch.
   */
  orderBy?: Prisma.ActorsOrderByWithRelationInput | Prisma.ActorsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Actors.
   */
  cursor?: Prisma.ActorsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Actors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Actors.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Actors.
   */
  distinct?: Prisma.ActorsScalarFieldEnum | Prisma.ActorsScalarFieldEnum[]
}

/**
 * Actors findFirstOrThrow
 */
export type ActorsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Actors
   */
  select?: Prisma.ActorsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Actors
   */
  omit?: Prisma.ActorsOmit<ExtArgs> | null
  /**
   * Filter, which Actors to fetch.
   */
  where?: Prisma.ActorsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Actors to fetch.
   */
  orderBy?: Prisma.ActorsOrderByWithRelationInput | Prisma.ActorsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Actors.
   */
  cursor?: Prisma.ActorsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Actors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Actors.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Actors.
   */
  distinct?: Prisma.ActorsScalarFieldEnum | Prisma.ActorsScalarFieldEnum[]
}

/**
 * Actors findMany
 */
export type ActorsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Actors
   */
  select?: Prisma.ActorsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Actors
   */
  omit?: Prisma.ActorsOmit<ExtArgs> | null
  /**
   * Filter, which Actors to fetch.
   */
  where?: Prisma.ActorsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Actors to fetch.
   */
  orderBy?: Prisma.ActorsOrderByWithRelationInput | Prisma.ActorsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Actors.
   */
  cursor?: Prisma.ActorsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Actors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Actors.
   */
  skip?: number
  distinct?: Prisma.ActorsScalarFieldEnum | Prisma.ActorsScalarFieldEnum[]
}

/**
 * Actors create
 */
export type ActorsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Actors
   */
  select?: Prisma.ActorsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Actors
   */
  omit?: Prisma.ActorsOmit<ExtArgs> | null
  /**
   * The data needed to create a Actors.
   */
  data: Prisma.XOR<Prisma.ActorsCreateInput, Prisma.ActorsUncheckedCreateInput>
}

/**
 * Actors createMany
 */
export type ActorsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Actors.
   */
  data: Prisma.ActorsCreateManyInput | Prisma.ActorsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Actors createManyAndReturn
 */
export type ActorsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Actors
   */
  select?: Prisma.ActorsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Actors
   */
  omit?: Prisma.ActorsOmit<ExtArgs> | null
  /**
   * The data used to create many Actors.
   */
  data: Prisma.ActorsCreateManyInput | Prisma.ActorsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Actors update
 */
export type ActorsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Actors
   */
  select?: Prisma.ActorsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Actors
   */
  omit?: Prisma.ActorsOmit<ExtArgs> | null
  /**
   * The data needed to update a Actors.
   */
  data: Prisma.XOR<Prisma.ActorsUpdateInput, Prisma.ActorsUncheckedUpdateInput>
  /**
   * Choose, which Actors to update.
   */
  where: Prisma.ActorsWhereUniqueInput
}

/**
 * Actors updateMany
 */
export type ActorsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Actors.
   */
  data: Prisma.XOR<Prisma.ActorsUpdateManyMutationInput, Prisma.ActorsUncheckedUpdateManyInput>
  /**
   * Filter which Actors to update
   */
  where?: Prisma.ActorsWhereInput
  /**
   * Limit how many Actors to update.
   */
  limit?: number
}

/**
 * Actors updateManyAndReturn
 */
export type ActorsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Actors
   */
  select?: Prisma.ActorsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Actors
   */
  omit?: Prisma.ActorsOmit<ExtArgs> | null
  /**
   * The data used to update Actors.
   */
  data: Prisma.XOR<Prisma.ActorsUpdateManyMutationInput, Prisma.ActorsUncheckedUpdateManyInput>
  /**
   * Filter which Actors to update
   */
  where?: Prisma.ActorsWhereInput
  /**
   * Limit how many Actors to update.
   */
  limit?: number
}

/**
 * Actors upsert
 */
export type ActorsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Actors
   */
  select?: Prisma.ActorsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Actors
   */
  omit?: Prisma.ActorsOmit<ExtArgs> | null
  /**
   * The filter to search for the Actors to update in case it exists.
   */
  where: Prisma.ActorsWhereUniqueInput
  /**
   * In case the Actors found by the `where` argument doesn't exist, create a new Actors with this data.
   */
  create: Prisma.XOR<Prisma.ActorsCreateInput, Prisma.ActorsUncheckedCreateInput>
  /**
   * In case the Actors was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ActorsUpdateInput, Prisma.ActorsUncheckedUpdateInput>
}

/**
 * Actors delete
 */
export type ActorsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Actors
   */
  select?: Prisma.ActorsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Actors
   */
  omit?: Prisma.ActorsOmit<ExtArgs> | null
  /**
   * Filter which Actors to delete.
   */
  where: Prisma.ActorsWhereUniqueInput
}

/**
 * Actors deleteMany
 */
export type ActorsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Actors to delete
   */
  where?: Prisma.ActorsWhereInput
  /**
   * Limit how many Actors to delete.
   */
  limit?: number
}

/**
 * Actors without action
 */
export type ActorsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Actors
   */
  select?: Prisma.ActorsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Actors
   */
  omit?: Prisma.ActorsOmit<ExtArgs> | null
}
