
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Accounts` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Accounts
 * 
 */
export type AccountsModel = runtime.Types.Result.DefaultSelection<Prisma.$AccountsPayload>

export type AggregateAccounts = {
  _count: AccountsCountAggregateOutputType | null
  _avg: AccountsAvgAggregateOutputType | null
  _sum: AccountsSumAggregateOutputType | null
  _min: AccountsMinAggregateOutputType | null
  _max: AccountsMaxAggregateOutputType | null
}

export type AccountsAvgAggregateOutputType = {
  expiresIn: number | null
}

export type AccountsSumAggregateOutputType = {
  expiresIn: number | null
}

export type AccountsMinAggregateOutputType = {
  id: string | null
  type: string | null
  provider: string | null
  providerId: string | null
  accessToken: string | null
  refreshToken: string | null
  expiresIn: number | null
  userId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type AccountsMaxAggregateOutputType = {
  id: string | null
  type: string | null
  provider: string | null
  providerId: string | null
  accessToken: string | null
  refreshToken: string | null
  expiresIn: number | null
  userId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type AccountsCountAggregateOutputType = {
  id: number
  type: number
  provider: number
  providerId: number
  accessToken: number
  refreshToken: number
  expiresIn: number
  userId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type AccountsAvgAggregateInputType = {
  expiresIn?: true
}

export type AccountsSumAggregateInputType = {
  expiresIn?: true
}

export type AccountsMinAggregateInputType = {
  id?: true
  type?: true
  provider?: true
  providerId?: true
  accessToken?: true
  refreshToken?: true
  expiresIn?: true
  userId?: true
  createdAt?: true
  updatedAt?: true
}

export type AccountsMaxAggregateInputType = {
  id?: true
  type?: true
  provider?: true
  providerId?: true
  accessToken?: true
  refreshToken?: true
  expiresIn?: true
  userId?: true
  createdAt?: true
  updatedAt?: true
}

export type AccountsCountAggregateInputType = {
  id?: true
  type?: true
  provider?: true
  providerId?: true
  accessToken?: true
  refreshToken?: true
  expiresIn?: true
  userId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type AccountsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Accounts to aggregate.
   */
  where?: Prisma.AccountsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Accounts to fetch.
   */
  orderBy?: Prisma.AccountsOrderByWithRelationInput | Prisma.AccountsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AccountsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Accounts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Accounts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Accounts
  **/
  _count?: true | AccountsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: AccountsAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: AccountsSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AccountsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AccountsMaxAggregateInputType
}

export type GetAccountsAggregateType<T extends AccountsAggregateArgs> = {
      [P in keyof T & keyof AggregateAccounts]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAccounts[P]>
    : Prisma.GetScalarType<T[P], AggregateAccounts[P]>
}




export type AccountsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AccountsWhereInput
  orderBy?: Prisma.AccountsOrderByWithAggregationInput | Prisma.AccountsOrderByWithAggregationInput[]
  by: Prisma.AccountsScalarFieldEnum[] | Prisma.AccountsScalarFieldEnum
  having?: Prisma.AccountsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AccountsCountAggregateInputType | true
  _avg?: AccountsAvgAggregateInputType
  _sum?: AccountsSumAggregateInputType
  _min?: AccountsMinAggregateInputType
  _max?: AccountsMaxAggregateInputType
}

export type AccountsGroupByOutputType = {
  id: string
  type: string
  provider: string
  providerId: string
  accessToken: string
  refreshToken: string
  expiresIn: number
  userId: string | null
  createdAt: Date
  updatedAt: Date
  _count: AccountsCountAggregateOutputType | null
  _avg: AccountsAvgAggregateOutputType | null
  _sum: AccountsSumAggregateOutputType | null
  _min: AccountsMinAggregateOutputType | null
  _max: AccountsMaxAggregateOutputType | null
}

type GetAccountsGroupByPayload<T extends AccountsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AccountsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AccountsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AccountsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AccountsGroupByOutputType[P]>
      }
    >
  >



export type AccountsWhereInput = {
  AND?: Prisma.AccountsWhereInput | Prisma.AccountsWhereInput[]
  OR?: Prisma.AccountsWhereInput[]
  NOT?: Prisma.AccountsWhereInput | Prisma.AccountsWhereInput[]
  id?: Prisma.StringFilter<"Accounts"> | string
  type?: Prisma.StringFilter<"Accounts"> | string
  provider?: Prisma.StringFilter<"Accounts"> | string
  providerId?: Prisma.StringFilter<"Accounts"> | string
  accessToken?: Prisma.StringFilter<"Accounts"> | string
  refreshToken?: Prisma.StringFilter<"Accounts"> | string
  expiresIn?: Prisma.IntFilter<"Accounts"> | number
  userId?: Prisma.StringNullableFilter<"Accounts"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Accounts"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Accounts"> | Date | string
}

export type AccountsOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  type?: Prisma.SortOrder
  provider?: Prisma.SortOrder
  providerId?: Prisma.SortOrder
  accessToken?: Prisma.SortOrder
  refreshToken?: Prisma.SortOrder
  expiresIn?: Prisma.SortOrder
  userId?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AccountsWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  provider_providerId?: Prisma.AccountsProviderProviderIdCompoundUniqueInput
  AND?: Prisma.AccountsWhereInput | Prisma.AccountsWhereInput[]
  OR?: Prisma.AccountsWhereInput[]
  NOT?: Prisma.AccountsWhereInput | Prisma.AccountsWhereInput[]
  type?: Prisma.StringFilter<"Accounts"> | string
  provider?: Prisma.StringFilter<"Accounts"> | string
  providerId?: Prisma.StringFilter<"Accounts"> | string
  accessToken?: Prisma.StringFilter<"Accounts"> | string
  refreshToken?: Prisma.StringFilter<"Accounts"> | string
  expiresIn?: Prisma.IntFilter<"Accounts"> | number
  userId?: Prisma.StringNullableFilter<"Accounts"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Accounts"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Accounts"> | Date | string
}, "id" | "provider_providerId">

export type AccountsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  type?: Prisma.SortOrder
  provider?: Prisma.SortOrder
  providerId?: Prisma.SortOrder
  accessToken?: Prisma.SortOrder
  refreshToken?: Prisma.SortOrder
  expiresIn?: Prisma.SortOrder
  userId?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.AccountsCountOrderByAggregateInput
  _avg?: Prisma.AccountsAvgOrderByAggregateInput
  _max?: Prisma.AccountsMaxOrderByAggregateInput
  _min?: Prisma.AccountsMinOrderByAggregateInput
  _sum?: Prisma.AccountsSumOrderByAggregateInput
}

export type AccountsScalarWhereWithAggregatesInput = {
  AND?: Prisma.AccountsScalarWhereWithAggregatesInput | Prisma.AccountsScalarWhereWithAggregatesInput[]
  OR?: Prisma.AccountsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AccountsScalarWhereWithAggregatesInput | Prisma.AccountsScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Accounts"> | string
  type?: Prisma.StringWithAggregatesFilter<"Accounts"> | string
  provider?: Prisma.StringWithAggregatesFilter<"Accounts"> | string
  providerId?: Prisma.StringWithAggregatesFilter<"Accounts"> | string
  accessToken?: Prisma.StringWithAggregatesFilter<"Accounts"> | string
  refreshToken?: Prisma.StringWithAggregatesFilter<"Accounts"> | string
  expiresIn?: Prisma.IntWithAggregatesFilter<"Accounts"> | number
  userId?: Prisma.StringNullableWithAggregatesFilter<"Accounts"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Accounts"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Accounts"> | Date | string
}

export type AccountsCreateInput = {
  id?: string
  type: string
  provider: string
  providerId: string
  accessToken: string
  refreshToken: string
  expiresIn: number
  userId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AccountsUncheckedCreateInput = {
  id?: string
  type: string
  provider: string
  providerId: string
  accessToken: string
  refreshToken: string
  expiresIn: number
  userId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AccountsUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  provider?: Prisma.StringFieldUpdateOperationsInput | string
  providerId?: Prisma.StringFieldUpdateOperationsInput | string
  accessToken?: Prisma.StringFieldUpdateOperationsInput | string
  refreshToken?: Prisma.StringFieldUpdateOperationsInput | string
  expiresIn?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AccountsUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  provider?: Prisma.StringFieldUpdateOperationsInput | string
  providerId?: Prisma.StringFieldUpdateOperationsInput | string
  accessToken?: Prisma.StringFieldUpdateOperationsInput | string
  refreshToken?: Prisma.StringFieldUpdateOperationsInput | string
  expiresIn?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AccountsCreateManyInput = {
  id?: string
  type: string
  provider: string
  providerId: string
  accessToken: string
  refreshToken: string
  expiresIn: number
  userId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AccountsUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  provider?: Prisma.StringFieldUpdateOperationsInput | string
  providerId?: Prisma.StringFieldUpdateOperationsInput | string
  accessToken?: Prisma.StringFieldUpdateOperationsInput | string
  refreshToken?: Prisma.StringFieldUpdateOperationsInput | string
  expiresIn?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AccountsUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  provider?: Prisma.StringFieldUpdateOperationsInput | string
  providerId?: Prisma.StringFieldUpdateOperationsInput | string
  accessToken?: Prisma.StringFieldUpdateOperationsInput | string
  refreshToken?: Prisma.StringFieldUpdateOperationsInput | string
  expiresIn?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AccountsProviderProviderIdCompoundUniqueInput = {
  provider: string
  providerId: string
}

export type AccountsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  type?: Prisma.SortOrder
  provider?: Prisma.SortOrder
  providerId?: Prisma.SortOrder
  accessToken?: Prisma.SortOrder
  refreshToken?: Prisma.SortOrder
  expiresIn?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AccountsAvgOrderByAggregateInput = {
  expiresIn?: Prisma.SortOrder
}

export type AccountsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  type?: Prisma.SortOrder
  provider?: Prisma.SortOrder
  providerId?: Prisma.SortOrder
  accessToken?: Prisma.SortOrder
  refreshToken?: Prisma.SortOrder
  expiresIn?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AccountsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  type?: Prisma.SortOrder
  provider?: Prisma.SortOrder
  providerId?: Prisma.SortOrder
  accessToken?: Prisma.SortOrder
  refreshToken?: Prisma.SortOrder
  expiresIn?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AccountsSumOrderByAggregateInput = {
  expiresIn?: Prisma.SortOrder
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}



export type AccountsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  type?: boolean
  provider?: boolean
  providerId?: boolean
  accessToken?: boolean
  refreshToken?: boolean
  expiresIn?: boolean
  userId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["accounts"]>

export type AccountsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  type?: boolean
  provider?: boolean
  providerId?: boolean
  accessToken?: boolean
  refreshToken?: boolean
  expiresIn?: boolean
  userId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["accounts"]>

export type AccountsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  type?: boolean
  provider?: boolean
  providerId?: boolean
  accessToken?: boolean
  refreshToken?: boolean
  expiresIn?: boolean
  userId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["accounts"]>

export type AccountsSelectScalar = {
  id?: boolean
  type?: boolean
  provider?: boolean
  providerId?: boolean
  accessToken?: boolean
  refreshToken?: boolean
  expiresIn?: boolean
  userId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type AccountsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "type" | "provider" | "providerId" | "accessToken" | "refreshToken" | "expiresIn" | "userId" | "createdAt" | "updatedAt", ExtArgs["result"]["accounts"]>

export type $AccountsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Accounts"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    type: string
    provider: string
    providerId: string
    accessToken: string
    refreshToken: string
    expiresIn: number
    userId: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["accounts"]>
  composites: {}
}

export type AccountsGetPayload<S extends boolean | null | undefined | AccountsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AccountsPayload, S>

export type AccountsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AccountsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: AccountsCountAggregateInputType | true
  }

export interface AccountsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Accounts'], meta: { name: 'Accounts' } }
  /**
   * Find zero or one Accounts that matches the filter.
   * @param {AccountsFindUniqueArgs} args - Arguments to find a Accounts
   * @example
   * // Get one Accounts
   * const accounts = await prisma.accounts.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AccountsFindUniqueArgs>(args: Prisma.SelectSubset<T, AccountsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AccountsClient<runtime.Types.Result.GetResult<Prisma.$AccountsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Accounts that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AccountsFindUniqueOrThrowArgs} args - Arguments to find a Accounts
   * @example
   * // Get one Accounts
   * const accounts = await prisma.accounts.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AccountsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AccountsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AccountsClient<runtime.Types.Result.GetResult<Prisma.$AccountsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Accounts that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountsFindFirstArgs} args - Arguments to find a Accounts
   * @example
   * // Get one Accounts
   * const accounts = await prisma.accounts.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AccountsFindFirstArgs>(args?: Prisma.SelectSubset<T, AccountsFindFirstArgs<ExtArgs>>): Prisma.Prisma__AccountsClient<runtime.Types.Result.GetResult<Prisma.$AccountsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Accounts that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountsFindFirstOrThrowArgs} args - Arguments to find a Accounts
   * @example
   * // Get one Accounts
   * const accounts = await prisma.accounts.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AccountsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AccountsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AccountsClient<runtime.Types.Result.GetResult<Prisma.$AccountsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Accounts that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Accounts
   * const accounts = await prisma.accounts.findMany()
   * 
   * // Get first 10 Accounts
   * const accounts = await prisma.accounts.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const accountsWithIdOnly = await prisma.accounts.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends AccountsFindManyArgs>(args?: Prisma.SelectSubset<T, AccountsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AccountsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Accounts.
   * @param {AccountsCreateArgs} args - Arguments to create a Accounts.
   * @example
   * // Create one Accounts
   * const Accounts = await prisma.accounts.create({
   *   data: {
   *     // ... data to create a Accounts
   *   }
   * })
   * 
   */
  create<T extends AccountsCreateArgs>(args: Prisma.SelectSubset<T, AccountsCreateArgs<ExtArgs>>): Prisma.Prisma__AccountsClient<runtime.Types.Result.GetResult<Prisma.$AccountsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Accounts.
   * @param {AccountsCreateManyArgs} args - Arguments to create many Accounts.
   * @example
   * // Create many Accounts
   * const accounts = await prisma.accounts.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AccountsCreateManyArgs>(args?: Prisma.SelectSubset<T, AccountsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Accounts and returns the data saved in the database.
   * @param {AccountsCreateManyAndReturnArgs} args - Arguments to create many Accounts.
   * @example
   * // Create many Accounts
   * const accounts = await prisma.accounts.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Accounts and only return the `id`
   * const accountsWithIdOnly = await prisma.accounts.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends AccountsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, AccountsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AccountsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Accounts.
   * @param {AccountsDeleteArgs} args - Arguments to delete one Accounts.
   * @example
   * // Delete one Accounts
   * const Accounts = await prisma.accounts.delete({
   *   where: {
   *     // ... filter to delete one Accounts
   *   }
   * })
   * 
   */
  delete<T extends AccountsDeleteArgs>(args: Prisma.SelectSubset<T, AccountsDeleteArgs<ExtArgs>>): Prisma.Prisma__AccountsClient<runtime.Types.Result.GetResult<Prisma.$AccountsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Accounts.
   * @param {AccountsUpdateArgs} args - Arguments to update one Accounts.
   * @example
   * // Update one Accounts
   * const accounts = await prisma.accounts.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AccountsUpdateArgs>(args: Prisma.SelectSubset<T, AccountsUpdateArgs<ExtArgs>>): Prisma.Prisma__AccountsClient<runtime.Types.Result.GetResult<Prisma.$AccountsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Accounts.
   * @param {AccountsDeleteManyArgs} args - Arguments to filter Accounts to delete.
   * @example
   * // Delete a few Accounts
   * const { count } = await prisma.accounts.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AccountsDeleteManyArgs>(args?: Prisma.SelectSubset<T, AccountsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Accounts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Accounts
   * const accounts = await prisma.accounts.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AccountsUpdateManyArgs>(args: Prisma.SelectSubset<T, AccountsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Accounts and returns the data updated in the database.
   * @param {AccountsUpdateManyAndReturnArgs} args - Arguments to update many Accounts.
   * @example
   * // Update many Accounts
   * const accounts = await prisma.accounts.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Accounts and only return the `id`
   * const accountsWithIdOnly = await prisma.accounts.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends AccountsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, AccountsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AccountsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Accounts.
   * @param {AccountsUpsertArgs} args - Arguments to update or create a Accounts.
   * @example
   * // Update or create a Accounts
   * const accounts = await prisma.accounts.upsert({
   *   create: {
   *     // ... data to create a Accounts
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Accounts we want to update
   *   }
   * })
   */
  upsert<T extends AccountsUpsertArgs>(args: Prisma.SelectSubset<T, AccountsUpsertArgs<ExtArgs>>): Prisma.Prisma__AccountsClient<runtime.Types.Result.GetResult<Prisma.$AccountsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Accounts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountsCountArgs} args - Arguments to filter Accounts to count.
   * @example
   * // Count the number of Accounts
   * const count = await prisma.accounts.count({
   *   where: {
   *     // ... the filter for the Accounts we want to count
   *   }
   * })
  **/
  count<T extends AccountsCountArgs>(
    args?: Prisma.Subset<T, AccountsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AccountsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Accounts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AccountsAggregateArgs>(args: Prisma.Subset<T, AccountsAggregateArgs>): Prisma.PrismaPromise<GetAccountsAggregateType<T>>

  /**
   * Group by Accounts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AccountsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AccountsGroupByArgs['orderBy'] }
      : { orderBy?: AccountsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AccountsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Accounts model
 */
readonly fields: AccountsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Accounts.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AccountsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Accounts model
 */
export interface AccountsFieldRefs {
  readonly id: Prisma.FieldRef<"Accounts", 'String'>
  readonly type: Prisma.FieldRef<"Accounts", 'String'>
  readonly provider: Prisma.FieldRef<"Accounts", 'String'>
  readonly providerId: Prisma.FieldRef<"Accounts", 'String'>
  readonly accessToken: Prisma.FieldRef<"Accounts", 'String'>
  readonly refreshToken: Prisma.FieldRef<"Accounts", 'String'>
  readonly expiresIn: Prisma.FieldRef<"Accounts", 'Int'>
  readonly userId: Prisma.FieldRef<"Accounts", 'String'>
  readonly createdAt: Prisma.FieldRef<"Accounts", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Accounts", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Accounts findUnique
 */
export type AccountsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Accounts
   */
  select?: Prisma.AccountsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Accounts
   */
  omit?: Prisma.AccountsOmit<ExtArgs> | null
  /**
   * Filter, which Accounts to fetch.
   */
  where: Prisma.AccountsWhereUniqueInput
}

/**
 * Accounts findUniqueOrThrow
 */
export type AccountsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Accounts
   */
  select?: Prisma.AccountsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Accounts
   */
  omit?: Prisma.AccountsOmit<ExtArgs> | null
  /**
   * Filter, which Accounts to fetch.
   */
  where: Prisma.AccountsWhereUniqueInput
}

/**
 * Accounts findFirst
 */
export type AccountsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Accounts
   */
  select?: Prisma.AccountsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Accounts
   */
  omit?: Prisma.AccountsOmit<ExtArgs> | null
  /**
   * Filter, which Accounts to fetch.
   */
  where?: Prisma.AccountsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Accounts to fetch.
   */
  orderBy?: Prisma.AccountsOrderByWithRelationInput | Prisma.AccountsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Accounts.
   */
  cursor?: Prisma.AccountsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Accounts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Accounts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Accounts.
   */
  distinct?: Prisma.AccountsScalarFieldEnum | Prisma.AccountsScalarFieldEnum[]
}

/**
 * Accounts findFirstOrThrow
 */
export type AccountsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Accounts
   */
  select?: Prisma.AccountsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Accounts
   */
  omit?: Prisma.AccountsOmit<ExtArgs> | null
  /**
   * Filter, which Accounts to fetch.
   */
  where?: Prisma.AccountsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Accounts to fetch.
   */
  orderBy?: Prisma.AccountsOrderByWithRelationInput | Prisma.AccountsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Accounts.
   */
  cursor?: Prisma.AccountsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Accounts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Accounts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Accounts.
   */
  distinct?: Prisma.AccountsScalarFieldEnum | Prisma.AccountsScalarFieldEnum[]
}

/**
 * Accounts findMany
 */
export type AccountsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Accounts
   */
  select?: Prisma.AccountsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Accounts
   */
  omit?: Prisma.AccountsOmit<ExtArgs> | null
  /**
   * Filter, which Accounts to fetch.
   */
  where?: Prisma.AccountsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Accounts to fetch.
   */
  orderBy?: Prisma.AccountsOrderByWithRelationInput | Prisma.AccountsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Accounts.
   */
  cursor?: Prisma.AccountsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Accounts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Accounts.
   */
  skip?: number
  distinct?: Prisma.AccountsScalarFieldEnum | Prisma.AccountsScalarFieldEnum[]
}

/**
 * Accounts create
 */
export type AccountsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Accounts
   */
  select?: Prisma.AccountsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Accounts
   */
  omit?: Prisma.AccountsOmit<ExtArgs> | null
  /**
   * The data needed to create a Accounts.
   */
  data: Prisma.XOR<Prisma.AccountsCreateInput, Prisma.AccountsUncheckedCreateInput>
}

/**
 * Accounts createMany
 */
export type AccountsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Accounts.
   */
  data: Prisma.AccountsCreateManyInput | Prisma.AccountsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Accounts createManyAndReturn
 */
export type AccountsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Accounts
   */
  select?: Prisma.AccountsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Accounts
   */
  omit?: Prisma.AccountsOmit<ExtArgs> | null
  /**
   * The data used to create many Accounts.
   */
  data: Prisma.AccountsCreateManyInput | Prisma.AccountsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Accounts update
 */
export type AccountsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Accounts
   */
  select?: Prisma.AccountsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Accounts
   */
  omit?: Prisma.AccountsOmit<ExtArgs> | null
  /**
   * The data needed to update a Accounts.
   */
  data: Prisma.XOR<Prisma.AccountsUpdateInput, Prisma.AccountsUncheckedUpdateInput>
  /**
   * Choose, which Accounts to update.
   */
  where: Prisma.AccountsWhereUniqueInput
}

/**
 * Accounts updateMany
 */
export type AccountsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Accounts.
   */
  data: Prisma.XOR<Prisma.AccountsUpdateManyMutationInput, Prisma.AccountsUncheckedUpdateManyInput>
  /**
   * Filter which Accounts to update
   */
  where?: Prisma.AccountsWhereInput
  /**
   * Limit how many Accounts to update.
   */
  limit?: number
}

/**
 * Accounts updateManyAndReturn
 */
export type AccountsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Accounts
   */
  select?: Prisma.AccountsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Accounts
   */
  omit?: Prisma.AccountsOmit<ExtArgs> | null
  /**
   * The data used to update Accounts.
   */
  data: Prisma.XOR<Prisma.AccountsUpdateManyMutationInput, Prisma.AccountsUncheckedUpdateManyInput>
  /**
   * Filter which Accounts to update
   */
  where?: Prisma.AccountsWhereInput
  /**
   * Limit how many Accounts to update.
   */
  limit?: number
}

/**
 * Accounts upsert
 */
export type AccountsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Accounts
   */
  select?: Prisma.AccountsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Accounts
   */
  omit?: Prisma.AccountsOmit<ExtArgs> | null
  /**
   * The filter to search for the Accounts to update in case it exists.
   */
  where: Prisma.AccountsWhereUniqueInput
  /**
   * In case the Accounts found by the `where` argument doesn't exist, create a new Accounts with this data.
   */
  create: Prisma.XOR<Prisma.AccountsCreateInput, Prisma.AccountsUncheckedCreateInput>
  /**
   * In case the Accounts was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AccountsUpdateInput, Prisma.AccountsUncheckedUpdateInput>
}

/**
 * Accounts delete
 */
export type AccountsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Accounts
   */
  select?: Prisma.AccountsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Accounts
   */
  omit?: Prisma.AccountsOmit<ExtArgs> | null
  /**
   * Filter which Accounts to delete.
   */
  where: Prisma.AccountsWhereUniqueInput
}

/**
 * Accounts deleteMany
 */
export type AccountsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Accounts to delete
   */
  where?: Prisma.AccountsWhereInput
  /**
   * Limit how many Accounts to delete.
   */
  limit?: number
}

/**
 * Accounts without action
 */
export type AccountsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Accounts
   */
  select?: Prisma.AccountsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Accounts
   */
  omit?: Prisma.AccountsOmit<ExtArgs> | null
}
