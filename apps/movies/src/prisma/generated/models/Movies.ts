
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Movies` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Movies
 * 
 */
export type MoviesModel = runtime.Types.Result.DefaultSelection<Prisma.$MoviesPayload>

export type AggregateMovies = {
  _count: MoviesCountAggregateOutputType | null
  _avg: MoviesAvgAggregateOutputType | null
  _sum: MoviesSumAggregateOutputType | null
  _min: MoviesMinAggregateOutputType | null
  _max: MoviesMaxAggregateOutputType | null
}

export type MoviesAvgAggregateOutputType = {
  year: number | null
  duration: number | null
  rating: number | null
  countOpened: number | null
}

export type MoviesSumAggregateOutputType = {
  year: number | null
  duration: number | null
  rating: number | null
  countOpened: number | null
}

export type MoviesMinAggregateOutputType = {
  id: string | null
  slug: string | null
  title: string | null
  poster: string | null
  bigPoster: string | null
  videoUrl: string | null
  year: number | null
  duration: number | null
  country: string | null
  isSendTelegram: boolean | null
  rating: number | null
  countOpened: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type MoviesMaxAggregateOutputType = {
  id: string | null
  slug: string | null
  title: string | null
  poster: string | null
  bigPoster: string | null
  videoUrl: string | null
  year: number | null
  duration: number | null
  country: string | null
  isSendTelegram: boolean | null
  rating: number | null
  countOpened: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type MoviesCountAggregateOutputType = {
  id: number
  slug: number
  title: number
  poster: number
  bigPoster: number
  videoUrl: number
  year: number
  duration: number
  country: number
  actorsIds: number
  genresIds: number
  isSendTelegram: number
  rating: number
  countOpened: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type MoviesAvgAggregateInputType = {
  year?: true
  duration?: true
  rating?: true
  countOpened?: true
}

export type MoviesSumAggregateInputType = {
  year?: true
  duration?: true
  rating?: true
  countOpened?: true
}

export type MoviesMinAggregateInputType = {
  id?: true
  slug?: true
  title?: true
  poster?: true
  bigPoster?: true
  videoUrl?: true
  year?: true
  duration?: true
  country?: true
  isSendTelegram?: true
  rating?: true
  countOpened?: true
  createdAt?: true
  updatedAt?: true
}

export type MoviesMaxAggregateInputType = {
  id?: true
  slug?: true
  title?: true
  poster?: true
  bigPoster?: true
  videoUrl?: true
  year?: true
  duration?: true
  country?: true
  isSendTelegram?: true
  rating?: true
  countOpened?: true
  createdAt?: true
  updatedAt?: true
}

export type MoviesCountAggregateInputType = {
  id?: true
  slug?: true
  title?: true
  poster?: true
  bigPoster?: true
  videoUrl?: true
  year?: true
  duration?: true
  country?: true
  actorsIds?: true
  genresIds?: true
  isSendTelegram?: true
  rating?: true
  countOpened?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type MoviesAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Movies to aggregate.
   */
  where?: Prisma.MoviesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Movies to fetch.
   */
  orderBy?: Prisma.MoviesOrderByWithRelationInput | Prisma.MoviesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.MoviesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Movies from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Movies.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Movies
  **/
  _count?: true | MoviesCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: MoviesAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: MoviesSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: MoviesMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: MoviesMaxAggregateInputType
}

export type GetMoviesAggregateType<T extends MoviesAggregateArgs> = {
      [P in keyof T & keyof AggregateMovies]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMovies[P]>
    : Prisma.GetScalarType<T[P], AggregateMovies[P]>
}




export type MoviesGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MoviesWhereInput
  orderBy?: Prisma.MoviesOrderByWithAggregationInput | Prisma.MoviesOrderByWithAggregationInput[]
  by: Prisma.MoviesScalarFieldEnum[] | Prisma.MoviesScalarFieldEnum
  having?: Prisma.MoviesScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: MoviesCountAggregateInputType | true
  _avg?: MoviesAvgAggregateInputType
  _sum?: MoviesSumAggregateInputType
  _min?: MoviesMinAggregateInputType
  _max?: MoviesMaxAggregateInputType
}

export type MoviesGroupByOutputType = {
  id: string
  slug: string
  title: string
  poster: string
  bigPoster: string
  videoUrl: string
  year: number
  duration: number
  country: string
  actorsIds: string[]
  genresIds: string[]
  isSendTelegram: boolean | null
  rating: number | null
  countOpened: number | null
  createdAt: Date
  updatedAt: Date
  _count: MoviesCountAggregateOutputType | null
  _avg: MoviesAvgAggregateOutputType | null
  _sum: MoviesSumAggregateOutputType | null
  _min: MoviesMinAggregateOutputType | null
  _max: MoviesMaxAggregateOutputType | null
}

type GetMoviesGroupByPayload<T extends MoviesGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MoviesGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof MoviesGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MoviesGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MoviesGroupByOutputType[P]>
      }
    >
  >



export type MoviesWhereInput = {
  AND?: Prisma.MoviesWhereInput | Prisma.MoviesWhereInput[]
  OR?: Prisma.MoviesWhereInput[]
  NOT?: Prisma.MoviesWhereInput | Prisma.MoviesWhereInput[]
  id?: Prisma.StringFilter<"Movies"> | string
  slug?: Prisma.StringFilter<"Movies"> | string
  title?: Prisma.StringFilter<"Movies"> | string
  poster?: Prisma.StringFilter<"Movies"> | string
  bigPoster?: Prisma.StringFilter<"Movies"> | string
  videoUrl?: Prisma.StringFilter<"Movies"> | string
  year?: Prisma.IntFilter<"Movies"> | number
  duration?: Prisma.IntFilter<"Movies"> | number
  country?: Prisma.StringFilter<"Movies"> | string
  actorsIds?: Prisma.StringNullableListFilter<"Movies">
  genresIds?: Prisma.StringNullableListFilter<"Movies">
  isSendTelegram?: Prisma.BoolNullableFilter<"Movies"> | boolean | null
  rating?: Prisma.FloatNullableFilter<"Movies"> | number | null
  countOpened?: Prisma.IntNullableFilter<"Movies"> | number | null
  createdAt?: Prisma.DateTimeFilter<"Movies"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Movies"> | Date | string
}

export type MoviesOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  title?: Prisma.SortOrder
  poster?: Prisma.SortOrder
  bigPoster?: Prisma.SortOrder
  videoUrl?: Prisma.SortOrder
  year?: Prisma.SortOrder
  duration?: Prisma.SortOrder
  country?: Prisma.SortOrder
  actorsIds?: Prisma.SortOrder
  genresIds?: Prisma.SortOrder
  isSendTelegram?: Prisma.SortOrderInput | Prisma.SortOrder
  rating?: Prisma.SortOrderInput | Prisma.SortOrder
  countOpened?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MoviesWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  slug?: string
  title?: string
  AND?: Prisma.MoviesWhereInput | Prisma.MoviesWhereInput[]
  OR?: Prisma.MoviesWhereInput[]
  NOT?: Prisma.MoviesWhereInput | Prisma.MoviesWhereInput[]
  poster?: Prisma.StringFilter<"Movies"> | string
  bigPoster?: Prisma.StringFilter<"Movies"> | string
  videoUrl?: Prisma.StringFilter<"Movies"> | string
  year?: Prisma.IntFilter<"Movies"> | number
  duration?: Prisma.IntFilter<"Movies"> | number
  country?: Prisma.StringFilter<"Movies"> | string
  actorsIds?: Prisma.StringNullableListFilter<"Movies">
  genresIds?: Prisma.StringNullableListFilter<"Movies">
  isSendTelegram?: Prisma.BoolNullableFilter<"Movies"> | boolean | null
  rating?: Prisma.FloatNullableFilter<"Movies"> | number | null
  countOpened?: Prisma.IntNullableFilter<"Movies"> | number | null
  createdAt?: Prisma.DateTimeFilter<"Movies"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Movies"> | Date | string
}, "id" | "slug" | "title">

export type MoviesOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  title?: Prisma.SortOrder
  poster?: Prisma.SortOrder
  bigPoster?: Prisma.SortOrder
  videoUrl?: Prisma.SortOrder
  year?: Prisma.SortOrder
  duration?: Prisma.SortOrder
  country?: Prisma.SortOrder
  actorsIds?: Prisma.SortOrder
  genresIds?: Prisma.SortOrder
  isSendTelegram?: Prisma.SortOrderInput | Prisma.SortOrder
  rating?: Prisma.SortOrderInput | Prisma.SortOrder
  countOpened?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.MoviesCountOrderByAggregateInput
  _avg?: Prisma.MoviesAvgOrderByAggregateInput
  _max?: Prisma.MoviesMaxOrderByAggregateInput
  _min?: Prisma.MoviesMinOrderByAggregateInput
  _sum?: Prisma.MoviesSumOrderByAggregateInput
}

export type MoviesScalarWhereWithAggregatesInput = {
  AND?: Prisma.MoviesScalarWhereWithAggregatesInput | Prisma.MoviesScalarWhereWithAggregatesInput[]
  OR?: Prisma.MoviesScalarWhereWithAggregatesInput[]
  NOT?: Prisma.MoviesScalarWhereWithAggregatesInput | Prisma.MoviesScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Movies"> | string
  slug?: Prisma.StringWithAggregatesFilter<"Movies"> | string
  title?: Prisma.StringWithAggregatesFilter<"Movies"> | string
  poster?: Prisma.StringWithAggregatesFilter<"Movies"> | string
  bigPoster?: Prisma.StringWithAggregatesFilter<"Movies"> | string
  videoUrl?: Prisma.StringWithAggregatesFilter<"Movies"> | string
  year?: Prisma.IntWithAggregatesFilter<"Movies"> | number
  duration?: Prisma.IntWithAggregatesFilter<"Movies"> | number
  country?: Prisma.StringWithAggregatesFilter<"Movies"> | string
  actorsIds?: Prisma.StringNullableListFilter<"Movies">
  genresIds?: Prisma.StringNullableListFilter<"Movies">
  isSendTelegram?: Prisma.BoolNullableWithAggregatesFilter<"Movies"> | boolean | null
  rating?: Prisma.FloatNullableWithAggregatesFilter<"Movies"> | number | null
  countOpened?: Prisma.IntNullableWithAggregatesFilter<"Movies"> | number | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Movies"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Movies"> | Date | string
}

export type MoviesCreateInput = {
  id?: string
  slug: string
  title: string
  poster: string
  bigPoster: string
  videoUrl: string
  year: number
  duration: number
  country: string
  actorsIds?: Prisma.MoviesCreateactorsIdsInput | string[]
  genresIds?: Prisma.MoviesCreategenresIdsInput | string[]
  isSendTelegram?: boolean | null
  rating?: number | null
  countOpened?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MoviesUncheckedCreateInput = {
  id?: string
  slug: string
  title: string
  poster: string
  bigPoster: string
  videoUrl: string
  year: number
  duration: number
  country: string
  actorsIds?: Prisma.MoviesCreateactorsIdsInput | string[]
  genresIds?: Prisma.MoviesCreategenresIdsInput | string[]
  isSendTelegram?: boolean | null
  rating?: number | null
  countOpened?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MoviesUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  poster?: Prisma.StringFieldUpdateOperationsInput | string
  bigPoster?: Prisma.StringFieldUpdateOperationsInput | string
  videoUrl?: Prisma.StringFieldUpdateOperationsInput | string
  year?: Prisma.IntFieldUpdateOperationsInput | number
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  country?: Prisma.StringFieldUpdateOperationsInput | string
  actorsIds?: Prisma.MoviesUpdateactorsIdsInput | string[]
  genresIds?: Prisma.MoviesUpdategenresIdsInput | string[]
  isSendTelegram?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  rating?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  countOpened?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MoviesUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  poster?: Prisma.StringFieldUpdateOperationsInput | string
  bigPoster?: Prisma.StringFieldUpdateOperationsInput | string
  videoUrl?: Prisma.StringFieldUpdateOperationsInput | string
  year?: Prisma.IntFieldUpdateOperationsInput | number
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  country?: Prisma.StringFieldUpdateOperationsInput | string
  actorsIds?: Prisma.MoviesUpdateactorsIdsInput | string[]
  genresIds?: Prisma.MoviesUpdategenresIdsInput | string[]
  isSendTelegram?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  rating?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  countOpened?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MoviesCreateManyInput = {
  id?: string
  slug: string
  title: string
  poster: string
  bigPoster: string
  videoUrl: string
  year: number
  duration: number
  country: string
  actorsIds?: Prisma.MoviesCreateactorsIdsInput | string[]
  genresIds?: Prisma.MoviesCreategenresIdsInput | string[]
  isSendTelegram?: boolean | null
  rating?: number | null
  countOpened?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MoviesUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  poster?: Prisma.StringFieldUpdateOperationsInput | string
  bigPoster?: Prisma.StringFieldUpdateOperationsInput | string
  videoUrl?: Prisma.StringFieldUpdateOperationsInput | string
  year?: Prisma.IntFieldUpdateOperationsInput | number
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  country?: Prisma.StringFieldUpdateOperationsInput | string
  actorsIds?: Prisma.MoviesUpdateactorsIdsInput | string[]
  genresIds?: Prisma.MoviesUpdategenresIdsInput | string[]
  isSendTelegram?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  rating?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  countOpened?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MoviesUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  poster?: Prisma.StringFieldUpdateOperationsInput | string
  bigPoster?: Prisma.StringFieldUpdateOperationsInput | string
  videoUrl?: Prisma.StringFieldUpdateOperationsInput | string
  year?: Prisma.IntFieldUpdateOperationsInput | number
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  country?: Prisma.StringFieldUpdateOperationsInput | string
  actorsIds?: Prisma.MoviesUpdateactorsIdsInput | string[]
  genresIds?: Prisma.MoviesUpdategenresIdsInput | string[]
  isSendTelegram?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  rating?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  countOpened?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type StringNullableListFilter<$PrismaModel = never> = {
  equals?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel> | null
  has?: string | Prisma.StringFieldRefInput<$PrismaModel> | null
  hasEvery?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel>
  hasSome?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel>
  isEmpty?: boolean
}

export type MoviesCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  title?: Prisma.SortOrder
  poster?: Prisma.SortOrder
  bigPoster?: Prisma.SortOrder
  videoUrl?: Prisma.SortOrder
  year?: Prisma.SortOrder
  duration?: Prisma.SortOrder
  country?: Prisma.SortOrder
  actorsIds?: Prisma.SortOrder
  genresIds?: Prisma.SortOrder
  isSendTelegram?: Prisma.SortOrder
  rating?: Prisma.SortOrder
  countOpened?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MoviesAvgOrderByAggregateInput = {
  year?: Prisma.SortOrder
  duration?: Prisma.SortOrder
  rating?: Prisma.SortOrder
  countOpened?: Prisma.SortOrder
}

export type MoviesMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  title?: Prisma.SortOrder
  poster?: Prisma.SortOrder
  bigPoster?: Prisma.SortOrder
  videoUrl?: Prisma.SortOrder
  year?: Prisma.SortOrder
  duration?: Prisma.SortOrder
  country?: Prisma.SortOrder
  isSendTelegram?: Prisma.SortOrder
  rating?: Prisma.SortOrder
  countOpened?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MoviesMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  title?: Prisma.SortOrder
  poster?: Prisma.SortOrder
  bigPoster?: Prisma.SortOrder
  videoUrl?: Prisma.SortOrder
  year?: Prisma.SortOrder
  duration?: Prisma.SortOrder
  country?: Prisma.SortOrder
  isSendTelegram?: Prisma.SortOrder
  rating?: Prisma.SortOrder
  countOpened?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MoviesSumOrderByAggregateInput = {
  year?: Prisma.SortOrder
  duration?: Prisma.SortOrder
  rating?: Prisma.SortOrder
  countOpened?: Prisma.SortOrder
}

export type MoviesCreateactorsIdsInput = {
  set: string[]
}

export type MoviesCreategenresIdsInput = {
  set: string[]
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type MoviesUpdateactorsIdsInput = {
  set?: string[]
  push?: string | string[]
}

export type MoviesUpdategenresIdsInput = {
  set?: string[]
  push?: string | string[]
}

export type NullableBoolFieldUpdateOperationsInput = {
  set?: boolean | null
}

export type NullableFloatFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type NullableIntFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}



export type MoviesSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  slug?: boolean
  title?: boolean
  poster?: boolean
  bigPoster?: boolean
  videoUrl?: boolean
  year?: boolean
  duration?: boolean
  country?: boolean
  actorsIds?: boolean
  genresIds?: boolean
  isSendTelegram?: boolean
  rating?: boolean
  countOpened?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["movies"]>

export type MoviesSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  slug?: boolean
  title?: boolean
  poster?: boolean
  bigPoster?: boolean
  videoUrl?: boolean
  year?: boolean
  duration?: boolean
  country?: boolean
  actorsIds?: boolean
  genresIds?: boolean
  isSendTelegram?: boolean
  rating?: boolean
  countOpened?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["movies"]>

export type MoviesSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  slug?: boolean
  title?: boolean
  poster?: boolean
  bigPoster?: boolean
  videoUrl?: boolean
  year?: boolean
  duration?: boolean
  country?: boolean
  actorsIds?: boolean
  genresIds?: boolean
  isSendTelegram?: boolean
  rating?: boolean
  countOpened?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["movies"]>

export type MoviesSelectScalar = {
  id?: boolean
  slug?: boolean
  title?: boolean
  poster?: boolean
  bigPoster?: boolean
  videoUrl?: boolean
  year?: boolean
  duration?: boolean
  country?: boolean
  actorsIds?: boolean
  genresIds?: boolean
  isSendTelegram?: boolean
  rating?: boolean
  countOpened?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type MoviesOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "slug" | "title" | "poster" | "bigPoster" | "videoUrl" | "year" | "duration" | "country" | "actorsIds" | "genresIds" | "isSendTelegram" | "rating" | "countOpened" | "createdAt" | "updatedAt", ExtArgs["result"]["movies"]>

export type $MoviesPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Movies"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    slug: string
    title: string
    poster: string
    bigPoster: string
    videoUrl: string
    year: number
    duration: number
    country: string
    actorsIds: string[]
    genresIds: string[]
    isSendTelegram: boolean | null
    rating: number | null
    countOpened: number | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["movies"]>
  composites: {}
}

export type MoviesGetPayload<S extends boolean | null | undefined | MoviesDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$MoviesPayload, S>

export type MoviesCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<MoviesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: MoviesCountAggregateInputType | true
  }

export interface MoviesDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Movies'], meta: { name: 'Movies' } }
  /**
   * Find zero or one Movies that matches the filter.
   * @param {MoviesFindUniqueArgs} args - Arguments to find a Movies
   * @example
   * // Get one Movies
   * const movies = await prisma.movies.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MoviesFindUniqueArgs>(args: Prisma.SelectSubset<T, MoviesFindUniqueArgs<ExtArgs>>): Prisma.Prisma__MoviesClient<runtime.Types.Result.GetResult<Prisma.$MoviesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Movies that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MoviesFindUniqueOrThrowArgs} args - Arguments to find a Movies
   * @example
   * // Get one Movies
   * const movies = await prisma.movies.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MoviesFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, MoviesFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__MoviesClient<runtime.Types.Result.GetResult<Prisma.$MoviesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Movies that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MoviesFindFirstArgs} args - Arguments to find a Movies
   * @example
   * // Get one Movies
   * const movies = await prisma.movies.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MoviesFindFirstArgs>(args?: Prisma.SelectSubset<T, MoviesFindFirstArgs<ExtArgs>>): Prisma.Prisma__MoviesClient<runtime.Types.Result.GetResult<Prisma.$MoviesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Movies that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MoviesFindFirstOrThrowArgs} args - Arguments to find a Movies
   * @example
   * // Get one Movies
   * const movies = await prisma.movies.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MoviesFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, MoviesFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__MoviesClient<runtime.Types.Result.GetResult<Prisma.$MoviesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Movies that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MoviesFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Movies
   * const movies = await prisma.movies.findMany()
   * 
   * // Get first 10 Movies
   * const movies = await prisma.movies.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const moviesWithIdOnly = await prisma.movies.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends MoviesFindManyArgs>(args?: Prisma.SelectSubset<T, MoviesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MoviesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Movies.
   * @param {MoviesCreateArgs} args - Arguments to create a Movies.
   * @example
   * // Create one Movies
   * const Movies = await prisma.movies.create({
   *   data: {
   *     // ... data to create a Movies
   *   }
   * })
   * 
   */
  create<T extends MoviesCreateArgs>(args: Prisma.SelectSubset<T, MoviesCreateArgs<ExtArgs>>): Prisma.Prisma__MoviesClient<runtime.Types.Result.GetResult<Prisma.$MoviesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Movies.
   * @param {MoviesCreateManyArgs} args - Arguments to create many Movies.
   * @example
   * // Create many Movies
   * const movies = await prisma.movies.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends MoviesCreateManyArgs>(args?: Prisma.SelectSubset<T, MoviesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Movies and returns the data saved in the database.
   * @param {MoviesCreateManyAndReturnArgs} args - Arguments to create many Movies.
   * @example
   * // Create many Movies
   * const movies = await prisma.movies.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Movies and only return the `id`
   * const moviesWithIdOnly = await prisma.movies.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends MoviesCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, MoviesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MoviesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Movies.
   * @param {MoviesDeleteArgs} args - Arguments to delete one Movies.
   * @example
   * // Delete one Movies
   * const Movies = await prisma.movies.delete({
   *   where: {
   *     // ... filter to delete one Movies
   *   }
   * })
   * 
   */
  delete<T extends MoviesDeleteArgs>(args: Prisma.SelectSubset<T, MoviesDeleteArgs<ExtArgs>>): Prisma.Prisma__MoviesClient<runtime.Types.Result.GetResult<Prisma.$MoviesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Movies.
   * @param {MoviesUpdateArgs} args - Arguments to update one Movies.
   * @example
   * // Update one Movies
   * const movies = await prisma.movies.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends MoviesUpdateArgs>(args: Prisma.SelectSubset<T, MoviesUpdateArgs<ExtArgs>>): Prisma.Prisma__MoviesClient<runtime.Types.Result.GetResult<Prisma.$MoviesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Movies.
   * @param {MoviesDeleteManyArgs} args - Arguments to filter Movies to delete.
   * @example
   * // Delete a few Movies
   * const { count } = await prisma.movies.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends MoviesDeleteManyArgs>(args?: Prisma.SelectSubset<T, MoviesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Movies.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MoviesUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Movies
   * const movies = await prisma.movies.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends MoviesUpdateManyArgs>(args: Prisma.SelectSubset<T, MoviesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Movies and returns the data updated in the database.
   * @param {MoviesUpdateManyAndReturnArgs} args - Arguments to update many Movies.
   * @example
   * // Update many Movies
   * const movies = await prisma.movies.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Movies and only return the `id`
   * const moviesWithIdOnly = await prisma.movies.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends MoviesUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, MoviesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MoviesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Movies.
   * @param {MoviesUpsertArgs} args - Arguments to update or create a Movies.
   * @example
   * // Update or create a Movies
   * const movies = await prisma.movies.upsert({
   *   create: {
   *     // ... data to create a Movies
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Movies we want to update
   *   }
   * })
   */
  upsert<T extends MoviesUpsertArgs>(args: Prisma.SelectSubset<T, MoviesUpsertArgs<ExtArgs>>): Prisma.Prisma__MoviesClient<runtime.Types.Result.GetResult<Prisma.$MoviesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Movies.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MoviesCountArgs} args - Arguments to filter Movies to count.
   * @example
   * // Count the number of Movies
   * const count = await prisma.movies.count({
   *   where: {
   *     // ... the filter for the Movies we want to count
   *   }
   * })
  **/
  count<T extends MoviesCountArgs>(
    args?: Prisma.Subset<T, MoviesCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MoviesCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Movies.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MoviesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends MoviesAggregateArgs>(args: Prisma.Subset<T, MoviesAggregateArgs>): Prisma.PrismaPromise<GetMoviesAggregateType<T>>

  /**
   * Group by Movies.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MoviesGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends MoviesGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MoviesGroupByArgs['orderBy'] }
      : { orderBy?: MoviesGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, MoviesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMoviesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Movies model
 */
readonly fields: MoviesFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Movies.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MoviesClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Movies model
 */
export interface MoviesFieldRefs {
  readonly id: Prisma.FieldRef<"Movies", 'String'>
  readonly slug: Prisma.FieldRef<"Movies", 'String'>
  readonly title: Prisma.FieldRef<"Movies", 'String'>
  readonly poster: Prisma.FieldRef<"Movies", 'String'>
  readonly bigPoster: Prisma.FieldRef<"Movies", 'String'>
  readonly videoUrl: Prisma.FieldRef<"Movies", 'String'>
  readonly year: Prisma.FieldRef<"Movies", 'Int'>
  readonly duration: Prisma.FieldRef<"Movies", 'Int'>
  readonly country: Prisma.FieldRef<"Movies", 'String'>
  readonly actorsIds: Prisma.FieldRef<"Movies", 'String[]'>
  readonly genresIds: Prisma.FieldRef<"Movies", 'String[]'>
  readonly isSendTelegram: Prisma.FieldRef<"Movies", 'Boolean'>
  readonly rating: Prisma.FieldRef<"Movies", 'Float'>
  readonly countOpened: Prisma.FieldRef<"Movies", 'Int'>
  readonly createdAt: Prisma.FieldRef<"Movies", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Movies", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Movies findUnique
 */
export type MoviesFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Movies
   */
  select?: Prisma.MoviesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Movies
   */
  omit?: Prisma.MoviesOmit<ExtArgs> | null
  /**
   * Filter, which Movies to fetch.
   */
  where: Prisma.MoviesWhereUniqueInput
}

/**
 * Movies findUniqueOrThrow
 */
export type MoviesFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Movies
   */
  select?: Prisma.MoviesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Movies
   */
  omit?: Prisma.MoviesOmit<ExtArgs> | null
  /**
   * Filter, which Movies to fetch.
   */
  where: Prisma.MoviesWhereUniqueInput
}

/**
 * Movies findFirst
 */
export type MoviesFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Movies
   */
  select?: Prisma.MoviesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Movies
   */
  omit?: Prisma.MoviesOmit<ExtArgs> | null
  /**
   * Filter, which Movies to fetch.
   */
  where?: Prisma.MoviesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Movies to fetch.
   */
  orderBy?: Prisma.MoviesOrderByWithRelationInput | Prisma.MoviesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Movies.
   */
  cursor?: Prisma.MoviesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Movies from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Movies.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Movies.
   */
  distinct?: Prisma.MoviesScalarFieldEnum | Prisma.MoviesScalarFieldEnum[]
}

/**
 * Movies findFirstOrThrow
 */
export type MoviesFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Movies
   */
  select?: Prisma.MoviesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Movies
   */
  omit?: Prisma.MoviesOmit<ExtArgs> | null
  /**
   * Filter, which Movies to fetch.
   */
  where?: Prisma.MoviesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Movies to fetch.
   */
  orderBy?: Prisma.MoviesOrderByWithRelationInput | Prisma.MoviesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Movies.
   */
  cursor?: Prisma.MoviesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Movies from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Movies.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Movies.
   */
  distinct?: Prisma.MoviesScalarFieldEnum | Prisma.MoviesScalarFieldEnum[]
}

/**
 * Movies findMany
 */
export type MoviesFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Movies
   */
  select?: Prisma.MoviesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Movies
   */
  omit?: Prisma.MoviesOmit<ExtArgs> | null
  /**
   * Filter, which Movies to fetch.
   */
  where?: Prisma.MoviesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Movies to fetch.
   */
  orderBy?: Prisma.MoviesOrderByWithRelationInput | Prisma.MoviesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Movies.
   */
  cursor?: Prisma.MoviesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Movies from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Movies.
   */
  skip?: number
  distinct?: Prisma.MoviesScalarFieldEnum | Prisma.MoviesScalarFieldEnum[]
}

/**
 * Movies create
 */
export type MoviesCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Movies
   */
  select?: Prisma.MoviesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Movies
   */
  omit?: Prisma.MoviesOmit<ExtArgs> | null
  /**
   * The data needed to create a Movies.
   */
  data: Prisma.XOR<Prisma.MoviesCreateInput, Prisma.MoviesUncheckedCreateInput>
}

/**
 * Movies createMany
 */
export type MoviesCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Movies.
   */
  data: Prisma.MoviesCreateManyInput | Prisma.MoviesCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Movies createManyAndReturn
 */
export type MoviesCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Movies
   */
  select?: Prisma.MoviesSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Movies
   */
  omit?: Prisma.MoviesOmit<ExtArgs> | null
  /**
   * The data used to create many Movies.
   */
  data: Prisma.MoviesCreateManyInput | Prisma.MoviesCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Movies update
 */
export type MoviesUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Movies
   */
  select?: Prisma.MoviesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Movies
   */
  omit?: Prisma.MoviesOmit<ExtArgs> | null
  /**
   * The data needed to update a Movies.
   */
  data: Prisma.XOR<Prisma.MoviesUpdateInput, Prisma.MoviesUncheckedUpdateInput>
  /**
   * Choose, which Movies to update.
   */
  where: Prisma.MoviesWhereUniqueInput
}

/**
 * Movies updateMany
 */
export type MoviesUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Movies.
   */
  data: Prisma.XOR<Prisma.MoviesUpdateManyMutationInput, Prisma.MoviesUncheckedUpdateManyInput>
  /**
   * Filter which Movies to update
   */
  where?: Prisma.MoviesWhereInput
  /**
   * Limit how many Movies to update.
   */
  limit?: number
}

/**
 * Movies updateManyAndReturn
 */
export type MoviesUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Movies
   */
  select?: Prisma.MoviesSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Movies
   */
  omit?: Prisma.MoviesOmit<ExtArgs> | null
  /**
   * The data used to update Movies.
   */
  data: Prisma.XOR<Prisma.MoviesUpdateManyMutationInput, Prisma.MoviesUncheckedUpdateManyInput>
  /**
   * Filter which Movies to update
   */
  where?: Prisma.MoviesWhereInput
  /**
   * Limit how many Movies to update.
   */
  limit?: number
}

/**
 * Movies upsert
 */
export type MoviesUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Movies
   */
  select?: Prisma.MoviesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Movies
   */
  omit?: Prisma.MoviesOmit<ExtArgs> | null
  /**
   * The filter to search for the Movies to update in case it exists.
   */
  where: Prisma.MoviesWhereUniqueInput
  /**
   * In case the Movies found by the `where` argument doesn't exist, create a new Movies with this data.
   */
  create: Prisma.XOR<Prisma.MoviesCreateInput, Prisma.MoviesUncheckedCreateInput>
  /**
   * In case the Movies was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MoviesUpdateInput, Prisma.MoviesUncheckedUpdateInput>
}

/**
 * Movies delete
 */
export type MoviesDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Movies
   */
  select?: Prisma.MoviesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Movies
   */
  omit?: Prisma.MoviesOmit<ExtArgs> | null
  /**
   * Filter which Movies to delete.
   */
  where: Prisma.MoviesWhereUniqueInput
}

/**
 * Movies deleteMany
 */
export type MoviesDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Movies to delete
   */
  where?: Prisma.MoviesWhereInput
  /**
   * Limit how many Movies to delete.
   */
  limit?: number
}

/**
 * Movies without action
 */
export type MoviesDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Movies
   */
  select?: Prisma.MoviesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Movies
   */
  omit?: Prisma.MoviesOmit<ExtArgs> | null
}
