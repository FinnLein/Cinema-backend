
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Genres` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Genres
 * 
 */
export type GenresModel = runtime.Types.Result.DefaultSelection<Prisma.$GenresPayload>

export type AggregateGenres = {
  _count: GenresCountAggregateOutputType | null
  _min: GenresMinAggregateOutputType | null
  _max: GenresMaxAggregateOutputType | null
}

export type GenresMinAggregateOutputType = {
  id: string | null
  name: string | null
  slug: string | null
  description: string | null
  icon: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type GenresMaxAggregateOutputType = {
  id: string | null
  name: string | null
  slug: string | null
  description: string | null
  icon: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type GenresCountAggregateOutputType = {
  id: number
  name: number
  slug: number
  description: number
  icon: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type GenresMinAggregateInputType = {
  id?: true
  name?: true
  slug?: true
  description?: true
  icon?: true
  createdAt?: true
  updatedAt?: true
}

export type GenresMaxAggregateInputType = {
  id?: true
  name?: true
  slug?: true
  description?: true
  icon?: true
  createdAt?: true
  updatedAt?: true
}

export type GenresCountAggregateInputType = {
  id?: true
  name?: true
  slug?: true
  description?: true
  icon?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type GenresAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Genres to aggregate.
   */
  where?: Prisma.GenresWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Genres to fetch.
   */
  orderBy?: Prisma.GenresOrderByWithRelationInput | Prisma.GenresOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.GenresWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Genres from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Genres.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Genres
  **/
  _count?: true | GenresCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: GenresMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: GenresMaxAggregateInputType
}

export type GetGenresAggregateType<T extends GenresAggregateArgs> = {
      [P in keyof T & keyof AggregateGenres]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateGenres[P]>
    : Prisma.GetScalarType<T[P], AggregateGenres[P]>
}




export type GenresGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.GenresWhereInput
  orderBy?: Prisma.GenresOrderByWithAggregationInput | Prisma.GenresOrderByWithAggregationInput[]
  by: Prisma.GenresScalarFieldEnum[] | Prisma.GenresScalarFieldEnum
  having?: Prisma.GenresScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: GenresCountAggregateInputType | true
  _min?: GenresMinAggregateInputType
  _max?: GenresMaxAggregateInputType
}

export type GenresGroupByOutputType = {
  id: string
  name: string
  slug: string
  description: string
  icon: string
  createdAt: Date
  updatedAt: Date
  _count: GenresCountAggregateOutputType | null
  _min: GenresMinAggregateOutputType | null
  _max: GenresMaxAggregateOutputType | null
}

type GetGenresGroupByPayload<T extends GenresGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<GenresGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof GenresGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], GenresGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], GenresGroupByOutputType[P]>
      }
    >
  >



export type GenresWhereInput = {
  AND?: Prisma.GenresWhereInput | Prisma.GenresWhereInput[]
  OR?: Prisma.GenresWhereInput[]
  NOT?: Prisma.GenresWhereInput | Prisma.GenresWhereInput[]
  id?: Prisma.StringFilter<"Genres"> | string
  name?: Prisma.StringFilter<"Genres"> | string
  slug?: Prisma.StringFilter<"Genres"> | string
  description?: Prisma.StringFilter<"Genres"> | string
  icon?: Prisma.StringFilter<"Genres"> | string
  createdAt?: Prisma.DateTimeFilter<"Genres"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Genres"> | Date | string
}

export type GenresOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  description?: Prisma.SortOrder
  icon?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type GenresWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  slug?: string
  AND?: Prisma.GenresWhereInput | Prisma.GenresWhereInput[]
  OR?: Prisma.GenresWhereInput[]
  NOT?: Prisma.GenresWhereInput | Prisma.GenresWhereInput[]
  name?: Prisma.StringFilter<"Genres"> | string
  description?: Prisma.StringFilter<"Genres"> | string
  icon?: Prisma.StringFilter<"Genres"> | string
  createdAt?: Prisma.DateTimeFilter<"Genres"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Genres"> | Date | string
}, "id" | "slug">

export type GenresOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  description?: Prisma.SortOrder
  icon?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.GenresCountOrderByAggregateInput
  _max?: Prisma.GenresMaxOrderByAggregateInput
  _min?: Prisma.GenresMinOrderByAggregateInput
}

export type GenresScalarWhereWithAggregatesInput = {
  AND?: Prisma.GenresScalarWhereWithAggregatesInput | Prisma.GenresScalarWhereWithAggregatesInput[]
  OR?: Prisma.GenresScalarWhereWithAggregatesInput[]
  NOT?: Prisma.GenresScalarWhereWithAggregatesInput | Prisma.GenresScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Genres"> | string
  name?: Prisma.StringWithAggregatesFilter<"Genres"> | string
  slug?: Prisma.StringWithAggregatesFilter<"Genres"> | string
  description?: Prisma.StringWithAggregatesFilter<"Genres"> | string
  icon?: Prisma.StringWithAggregatesFilter<"Genres"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Genres"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Genres"> | Date | string
}

export type GenresCreateInput = {
  id?: string
  name: string
  slug: string
  description: string
  icon: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type GenresUncheckedCreateInput = {
  id?: string
  name: string
  slug: string
  description: string
  icon: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type GenresUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  icon?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type GenresUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  icon?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type GenresCreateManyInput = {
  id?: string
  name: string
  slug: string
  description: string
  icon: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type GenresUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  icon?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type GenresUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  icon?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type GenresCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  description?: Prisma.SortOrder
  icon?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type GenresMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  description?: Prisma.SortOrder
  icon?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type GenresMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  description?: Prisma.SortOrder
  icon?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}



export type GenresSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  slug?: boolean
  description?: boolean
  icon?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["genres"]>

export type GenresSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  slug?: boolean
  description?: boolean
  icon?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["genres"]>

export type GenresSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  slug?: boolean
  description?: boolean
  icon?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["genres"]>

export type GenresSelectScalar = {
  id?: boolean
  name?: boolean
  slug?: boolean
  description?: boolean
  icon?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type GenresOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "slug" | "description" | "icon" | "createdAt" | "updatedAt", ExtArgs["result"]["genres"]>

export type $GenresPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Genres"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    slug: string
    description: string
    icon: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["genres"]>
  composites: {}
}

export type GenresGetPayload<S extends boolean | null | undefined | GenresDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$GenresPayload, S>

export type GenresCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<GenresFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: GenresCountAggregateInputType | true
  }

export interface GenresDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Genres'], meta: { name: 'Genres' } }
  /**
   * Find zero or one Genres that matches the filter.
   * @param {GenresFindUniqueArgs} args - Arguments to find a Genres
   * @example
   * // Get one Genres
   * const genres = await prisma.genres.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends GenresFindUniqueArgs>(args: Prisma.SelectSubset<T, GenresFindUniqueArgs<ExtArgs>>): Prisma.Prisma__GenresClient<runtime.Types.Result.GetResult<Prisma.$GenresPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Genres that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {GenresFindUniqueOrThrowArgs} args - Arguments to find a Genres
   * @example
   * // Get one Genres
   * const genres = await prisma.genres.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends GenresFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, GenresFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__GenresClient<runtime.Types.Result.GetResult<Prisma.$GenresPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Genres that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GenresFindFirstArgs} args - Arguments to find a Genres
   * @example
   * // Get one Genres
   * const genres = await prisma.genres.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends GenresFindFirstArgs>(args?: Prisma.SelectSubset<T, GenresFindFirstArgs<ExtArgs>>): Prisma.Prisma__GenresClient<runtime.Types.Result.GetResult<Prisma.$GenresPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Genres that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GenresFindFirstOrThrowArgs} args - Arguments to find a Genres
   * @example
   * // Get one Genres
   * const genres = await prisma.genres.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends GenresFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, GenresFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__GenresClient<runtime.Types.Result.GetResult<Prisma.$GenresPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Genres that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GenresFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Genres
   * const genres = await prisma.genres.findMany()
   * 
   * // Get first 10 Genres
   * const genres = await prisma.genres.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const genresWithIdOnly = await prisma.genres.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends GenresFindManyArgs>(args?: Prisma.SelectSubset<T, GenresFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GenresPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Genres.
   * @param {GenresCreateArgs} args - Arguments to create a Genres.
   * @example
   * // Create one Genres
   * const Genres = await prisma.genres.create({
   *   data: {
   *     // ... data to create a Genres
   *   }
   * })
   * 
   */
  create<T extends GenresCreateArgs>(args: Prisma.SelectSubset<T, GenresCreateArgs<ExtArgs>>): Prisma.Prisma__GenresClient<runtime.Types.Result.GetResult<Prisma.$GenresPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Genres.
   * @param {GenresCreateManyArgs} args - Arguments to create many Genres.
   * @example
   * // Create many Genres
   * const genres = await prisma.genres.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends GenresCreateManyArgs>(args?: Prisma.SelectSubset<T, GenresCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Genres and returns the data saved in the database.
   * @param {GenresCreateManyAndReturnArgs} args - Arguments to create many Genres.
   * @example
   * // Create many Genres
   * const genres = await prisma.genres.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Genres and only return the `id`
   * const genresWithIdOnly = await prisma.genres.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends GenresCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, GenresCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GenresPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Genres.
   * @param {GenresDeleteArgs} args - Arguments to delete one Genres.
   * @example
   * // Delete one Genres
   * const Genres = await prisma.genres.delete({
   *   where: {
   *     // ... filter to delete one Genres
   *   }
   * })
   * 
   */
  delete<T extends GenresDeleteArgs>(args: Prisma.SelectSubset<T, GenresDeleteArgs<ExtArgs>>): Prisma.Prisma__GenresClient<runtime.Types.Result.GetResult<Prisma.$GenresPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Genres.
   * @param {GenresUpdateArgs} args - Arguments to update one Genres.
   * @example
   * // Update one Genres
   * const genres = await prisma.genres.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends GenresUpdateArgs>(args: Prisma.SelectSubset<T, GenresUpdateArgs<ExtArgs>>): Prisma.Prisma__GenresClient<runtime.Types.Result.GetResult<Prisma.$GenresPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Genres.
   * @param {GenresDeleteManyArgs} args - Arguments to filter Genres to delete.
   * @example
   * // Delete a few Genres
   * const { count } = await prisma.genres.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends GenresDeleteManyArgs>(args?: Prisma.SelectSubset<T, GenresDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Genres.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GenresUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Genres
   * const genres = await prisma.genres.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends GenresUpdateManyArgs>(args: Prisma.SelectSubset<T, GenresUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Genres and returns the data updated in the database.
   * @param {GenresUpdateManyAndReturnArgs} args - Arguments to update many Genres.
   * @example
   * // Update many Genres
   * const genres = await prisma.genres.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Genres and only return the `id`
   * const genresWithIdOnly = await prisma.genres.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends GenresUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, GenresUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GenresPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Genres.
   * @param {GenresUpsertArgs} args - Arguments to update or create a Genres.
   * @example
   * // Update or create a Genres
   * const genres = await prisma.genres.upsert({
   *   create: {
   *     // ... data to create a Genres
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Genres we want to update
   *   }
   * })
   */
  upsert<T extends GenresUpsertArgs>(args: Prisma.SelectSubset<T, GenresUpsertArgs<ExtArgs>>): Prisma.Prisma__GenresClient<runtime.Types.Result.GetResult<Prisma.$GenresPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Genres.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GenresCountArgs} args - Arguments to filter Genres to count.
   * @example
   * // Count the number of Genres
   * const count = await prisma.genres.count({
   *   where: {
   *     // ... the filter for the Genres we want to count
   *   }
   * })
  **/
  count<T extends GenresCountArgs>(
    args?: Prisma.Subset<T, GenresCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], GenresCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Genres.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GenresAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends GenresAggregateArgs>(args: Prisma.Subset<T, GenresAggregateArgs>): Prisma.PrismaPromise<GetGenresAggregateType<T>>

  /**
   * Group by Genres.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GenresGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends GenresGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: GenresGroupByArgs['orderBy'] }
      : { orderBy?: GenresGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, GenresGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGenresGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Genres model
 */
readonly fields: GenresFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Genres.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__GenresClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Genres model
 */
export interface GenresFieldRefs {
  readonly id: Prisma.FieldRef<"Genres", 'String'>
  readonly name: Prisma.FieldRef<"Genres", 'String'>
  readonly slug: Prisma.FieldRef<"Genres", 'String'>
  readonly description: Prisma.FieldRef<"Genres", 'String'>
  readonly icon: Prisma.FieldRef<"Genres", 'String'>
  readonly createdAt: Prisma.FieldRef<"Genres", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Genres", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Genres findUnique
 */
export type GenresFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Genres
   */
  select?: Prisma.GenresSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Genres
   */
  omit?: Prisma.GenresOmit<ExtArgs> | null
  /**
   * Filter, which Genres to fetch.
   */
  where: Prisma.GenresWhereUniqueInput
}

/**
 * Genres findUniqueOrThrow
 */
export type GenresFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Genres
   */
  select?: Prisma.GenresSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Genres
   */
  omit?: Prisma.GenresOmit<ExtArgs> | null
  /**
   * Filter, which Genres to fetch.
   */
  where: Prisma.GenresWhereUniqueInput
}

/**
 * Genres findFirst
 */
export type GenresFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Genres
   */
  select?: Prisma.GenresSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Genres
   */
  omit?: Prisma.GenresOmit<ExtArgs> | null
  /**
   * Filter, which Genres to fetch.
   */
  where?: Prisma.GenresWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Genres to fetch.
   */
  orderBy?: Prisma.GenresOrderByWithRelationInput | Prisma.GenresOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Genres.
   */
  cursor?: Prisma.GenresWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Genres from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Genres.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Genres.
   */
  distinct?: Prisma.GenresScalarFieldEnum | Prisma.GenresScalarFieldEnum[]
}

/**
 * Genres findFirstOrThrow
 */
export type GenresFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Genres
   */
  select?: Prisma.GenresSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Genres
   */
  omit?: Prisma.GenresOmit<ExtArgs> | null
  /**
   * Filter, which Genres to fetch.
   */
  where?: Prisma.GenresWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Genres to fetch.
   */
  orderBy?: Prisma.GenresOrderByWithRelationInput | Prisma.GenresOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Genres.
   */
  cursor?: Prisma.GenresWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Genres from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Genres.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Genres.
   */
  distinct?: Prisma.GenresScalarFieldEnum | Prisma.GenresScalarFieldEnum[]
}

/**
 * Genres findMany
 */
export type GenresFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Genres
   */
  select?: Prisma.GenresSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Genres
   */
  omit?: Prisma.GenresOmit<ExtArgs> | null
  /**
   * Filter, which Genres to fetch.
   */
  where?: Prisma.GenresWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Genres to fetch.
   */
  orderBy?: Prisma.GenresOrderByWithRelationInput | Prisma.GenresOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Genres.
   */
  cursor?: Prisma.GenresWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Genres from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Genres.
   */
  skip?: number
  distinct?: Prisma.GenresScalarFieldEnum | Prisma.GenresScalarFieldEnum[]
}

/**
 * Genres create
 */
export type GenresCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Genres
   */
  select?: Prisma.GenresSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Genres
   */
  omit?: Prisma.GenresOmit<ExtArgs> | null
  /**
   * The data needed to create a Genres.
   */
  data: Prisma.XOR<Prisma.GenresCreateInput, Prisma.GenresUncheckedCreateInput>
}

/**
 * Genres createMany
 */
export type GenresCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Genres.
   */
  data: Prisma.GenresCreateManyInput | Prisma.GenresCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Genres createManyAndReturn
 */
export type GenresCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Genres
   */
  select?: Prisma.GenresSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Genres
   */
  omit?: Prisma.GenresOmit<ExtArgs> | null
  /**
   * The data used to create many Genres.
   */
  data: Prisma.GenresCreateManyInput | Prisma.GenresCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Genres update
 */
export type GenresUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Genres
   */
  select?: Prisma.GenresSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Genres
   */
  omit?: Prisma.GenresOmit<ExtArgs> | null
  /**
   * The data needed to update a Genres.
   */
  data: Prisma.XOR<Prisma.GenresUpdateInput, Prisma.GenresUncheckedUpdateInput>
  /**
   * Choose, which Genres to update.
   */
  where: Prisma.GenresWhereUniqueInput
}

/**
 * Genres updateMany
 */
export type GenresUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Genres.
   */
  data: Prisma.XOR<Prisma.GenresUpdateManyMutationInput, Prisma.GenresUncheckedUpdateManyInput>
  /**
   * Filter which Genres to update
   */
  where?: Prisma.GenresWhereInput
  /**
   * Limit how many Genres to update.
   */
  limit?: number
}

/**
 * Genres updateManyAndReturn
 */
export type GenresUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Genres
   */
  select?: Prisma.GenresSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Genres
   */
  omit?: Prisma.GenresOmit<ExtArgs> | null
  /**
   * The data used to update Genres.
   */
  data: Prisma.XOR<Prisma.GenresUpdateManyMutationInput, Prisma.GenresUncheckedUpdateManyInput>
  /**
   * Filter which Genres to update
   */
  where?: Prisma.GenresWhereInput
  /**
   * Limit how many Genres to update.
   */
  limit?: number
}

/**
 * Genres upsert
 */
export type GenresUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Genres
   */
  select?: Prisma.GenresSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Genres
   */
  omit?: Prisma.GenresOmit<ExtArgs> | null
  /**
   * The filter to search for the Genres to update in case it exists.
   */
  where: Prisma.GenresWhereUniqueInput
  /**
   * In case the Genres found by the `where` argument doesn't exist, create a new Genres with this data.
   */
  create: Prisma.XOR<Prisma.GenresCreateInput, Prisma.GenresUncheckedCreateInput>
  /**
   * In case the Genres was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.GenresUpdateInput, Prisma.GenresUncheckedUpdateInput>
}

/**
 * Genres delete
 */
export type GenresDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Genres
   */
  select?: Prisma.GenresSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Genres
   */
  omit?: Prisma.GenresOmit<ExtArgs> | null
  /**
   * Filter which Genres to delete.
   */
  where: Prisma.GenresWhereUniqueInput
}

/**
 * Genres deleteMany
 */
export type GenresDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Genres to delete
   */
  where?: Prisma.GenresWhereInput
  /**
   * Limit how many Genres to delete.
   */
  limit?: number
}

/**
 * Genres without action
 */
export type GenresDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Genres
   */
  select?: Prisma.GenresSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Genres
   */
  omit?: Prisma.GenresOmit<ExtArgs> | null
}
